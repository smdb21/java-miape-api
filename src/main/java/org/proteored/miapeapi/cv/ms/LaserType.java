package org.proteored.miapeapi.cv.ms;

import java.util.HashMap;
import java.util.Map;

import org.proteored.miapeapi.cv.Accession;
import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.cv.ControlVocabularySet;
import org.proteored.miapeapi.cv.ControlVocabularyTerm;
import org.proteored.miapeapi.exceptions.IllegalMiapeArgumentException;
import org.proteored.miapeapi.xml.pride.autogenerated.CvParamType;

public class LaserType extends ControlVocabularySet {
	/*
	 * LASER_ACCESION("MS:1000840", "laser"), LASER_TYPE ("MS:1000842",
	 * "laser type"), GAS ("MS:1000850", "gas laser"), SOLID_STATE
	 * ("MS:1000851", "solid-state laser"), DYE("MS:1000852", "dye-laser"),
	 * FREE__ELECTRON ("MS:1000853", "free electron laser") ;
	 */

	public static final String LASER_ACCESION = "MS:1000840";
	private static LaserType instance;

	public static LaserType getInstance(ControlVocabularyManager cvManager) {
		if (instance == null)
			instance = new LaserType(cvManager);
		return instance;
	}

	private LaserType(ControlVocabularyManager cvManager) {
		super(cvManager);
		String[] parentAccessionsTMP = { "MS:1000842" }; // LASER TYPE
		this.parentAccessions = parentAccessionsTMP;
		this.miapeSection = 205;

	}

	public static String getLaser(Map<String, CvParamType> cvParams,
			ControlVocabularyManager cvManager) {
		// log.info("getLaser = " + cvParams);
		for (String accession : cvParams.keySet()) {
			try {
				HashMap<String, ControlVocabularyTerm> accesionParents = cvManager
						.getAccesionParents(new Accession(accession));
				// if there is a cvParamType that is children of LASER_ACCESION
				if (accesionParents.containsKey(LaserType.LASER_ACCESION)) {
					return LASER_ACCESION;

				}
			} catch (IllegalMiapeArgumentException e) {
				return null;
			}

		}
		return null;
	}
}
