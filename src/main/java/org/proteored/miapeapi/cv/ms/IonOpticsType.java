package org.proteored.miapeapi.cv.ms;

import java.util.Map;

import org.proteored.miapeapi.cv.Accession;
import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.cv.ControlVocabularySet;
import org.proteored.miapeapi.cv.ControlVocabularyTerm;
import org.proteored.miapeapi.xml.pride.autogenerated.CvParamType;

public class IonOpticsType extends ControlVocabularySet {
	/*
	 * ION_OPTICS_TYPE("MS:1000597", "ion optics type"),
	 * STATIC_FIELD("MS:1000320", "static field"),
	 * SELECTED_ION_FLOW_TUBE("MS:1000281", "selected ion flow tube"),
	 * REFLECTRON("MS:1000300", "reflectron"), EINZEL_LENS("MS:1000307",
	 * "einzel lens"), TIME_LAG_FOCUSING("MS:1000286", "time lag focusing"),
	 * COLLISION_QUADRUPOLE("MS:1000275", "collision quadrupole"),
	 * FIRST_STABILITY_REGION("MS:1000309", "first stability region"),
	 * FRINGING_FIELD("MS:1000310", "fringing field"),
	 * DELAYED_EXTRACTION("MS:1000246", "delayed extraction"),
	 * KINETIC_ENERGY_ANALYZER("MS:1000311", "kinetic energy analyzer"),
	 * MAGNETIC_DEFLECTION("MS:1000221", "magnetic deflection");
	 */
	public static final Accession DELAYED_CV = new Accession("MS:1000246");
	private static IonOpticsType instance;

	public static IonOpticsType getInstance(ControlVocabularyManager cvManager) {
		if (instance == null)
			instance = new IonOpticsType(cvManager);
		return instance;
	}

	private IonOpticsType(ControlVocabularyManager cvManager) {
		super(cvManager);
		String[] parentAccessionsTMP = { "MS:1000597" };
		this.parentAccessions = parentAccessionsTMP;

		this.miapeSection = 219;

	}

	public static String getExtraction(Map<String, CvParamType> cvParams) {
		// log.info("getExtraction = " + cvParams);

		if (cvParams.containsKey(DELAYED_CV.toString())) {
			CvParamType param = cvParams.get(DELAYED_CV.toString());

			String extraction = param.getName() + param.getValue();
			// log.info("extraction = " + extraction);

			return extraction;
		}
		return null;
	}

	public static ControlVocabularyTerm getDelayedExtractionTerm(ControlVocabularyManager cvManager) {
		return getInstance(cvManager).getCVTermByAccession(DELAYED_CV);
	}

}
