package org.proteored.miapeapi.xml.gi.adapter;

import org.proteored.miapeapi.cv.gi.FeatureDetectionAlgorithmName;
import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.gi.Matching;
import org.proteored.miapeapi.xml.gi.autogenerated.GIMatchingType;
import org.proteored.miapeapi.xml.gi.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.gi.util.GIControlVocabularyXmlFactory;
import org.proteored.miapeapi.xml.util.MiapeXmlUtil;

public class MatchingAdapter implements Adapter<GIMatchingType> {
	private final Matching matching;
	private final ObjectFactory factory;
	private final GIControlVocabularyXmlFactory cvFactory;

	public MatchingAdapter(Matching matching, ObjectFactory factory,
			GIControlVocabularyXmlFactory cvFactory) {
		this.matching = matching;
		this.factory = factory;
		this.cvFactory = cvFactory;
	}

	@Override
	public GIMatchingType adapt() {
		GIMatchingType xmlMatching = factory.createGIMatchingType();
		xmlMatching.setEditing(matching.getEditing());
		xmlMatching.setLandmarks(matching.getLandmarks());
		xmlMatching.setStepOrder(matching.getStepOrder());
		xmlMatching.setCatalogNumber(matching.getCatalogNumber());
		xmlMatching.setComments(matching.getComments());
		xmlMatching.setDescription(matching.getDescription());
		xmlMatching.setManufacturer(matching.getManufacturer());
		xmlMatching.setModel(matching.getModel());
		xmlMatching.setName(cvFactory.createCV(matching.getName(), null,
				FeatureDetectionAlgorithmName.getInstance(cvFactory.getCvManager()))); // TODO

		xmlMatching.setParameters(matching.getParameters());
		if (matching.getReferenceImage() != null) {
			xmlMatching.setReferenceImage(MiapeXmlUtil.IdentifierPrefixes.IMAGE.getPrefix()
					+ matching.getReferenceImage().getId());
		}
		xmlMatching.setURI(matching.getURI());
		xmlMatching.setVersion(matching.getVersion());

		return xmlMatching;
	}

}
