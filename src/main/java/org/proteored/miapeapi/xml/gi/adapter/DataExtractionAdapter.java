package org.proteored.miapeapi.xml.gi.adapter;

import java.util.Set;

import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.gi.DataExtraction;
import org.proteored.miapeapi.interfaces.gi.FeatureDetection;
import org.proteored.miapeapi.interfaces.gi.FeatureQuantitation;
import org.proteored.miapeapi.interfaces.gi.ImageGelInformatics;
import org.proteored.miapeapi.interfaces.gi.Matching;
import org.proteored.miapeapi.xml.gi.autogenerated.GIDataExtraction;
import org.proteored.miapeapi.xml.gi.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.gi.util.GIControlVocabularyXmlFactory;

public class DataExtractionAdapter implements Adapter<GIDataExtraction>{
	private final DataExtraction dataExtraction;
	private final ObjectFactory factory;
	private final GIControlVocabularyXmlFactory cvFactory;
	public DataExtractionAdapter(DataExtraction dataExtraction,
			ObjectFactory factory, GIControlVocabularyXmlFactory cvFactory) {
		this.dataExtraction = dataExtraction;
		this.factory = factory;
		this.cvFactory = cvFactory;
	}

	@Override
	public GIDataExtraction adapt() {
		GIDataExtraction xmlDataExtraction = factory.createGIDataExtraction();
		xmlDataExtraction.setName(dataExtraction.getName());
		Set<FeatureDetection> featureDetections = dataExtraction.getFeatureDetections();
		if (featureDetections!=null) {
			for (FeatureDetection featureDetection : featureDetections) {
				xmlDataExtraction.getGIFeatureDetection().add(new FeatureDetectionAdapter(featureDetection, factory, cvFactory).adapt());
			}
		}
		Set<FeatureQuantitation> featureQuantitations = dataExtraction.getFeatureQuantitations();
		if (featureQuantitations!=null){
			for (FeatureQuantitation featureQuantitation : featureQuantitations) {
				xmlDataExtraction.getGIFeatureQuantitation().add(new FeatureQuantitationAdapter(featureQuantitation, factory, cvFactory).adapt());
			}

		}
		Set<ImageGelInformatics> inputImages = dataExtraction.getInputImages();
		if (inputImages !=null) {
			for (ImageGelInformatics imageGelInformatics : inputImages) {
				xmlDataExtraction.getGIExtractionInputImage().add(new ExtractionInputImageAdapter(imageGelInformatics, factory).adapt());
			}
		}
		Set<String> inputImageUris = dataExtraction.getInputImageUris();
		if (inputImageUris!=null) {
			for (String inputImageURI : inputImageUris) {
				xmlDataExtraction.getGIExtractionInputImage().add(new ExtractionInputImageAdapter(inputImageURI, factory).adapt());
			}
		}
		Set<Matching> matchings = dataExtraction.getMatchings();
		if (matchings!=null) {
			for (Matching matching : matchings) {
				xmlDataExtraction.getGIMatching().add(new MatchingAdapter(matching, factory, cvFactory).adapt());
			}
		}
		return xmlDataExtraction;
	}

}

