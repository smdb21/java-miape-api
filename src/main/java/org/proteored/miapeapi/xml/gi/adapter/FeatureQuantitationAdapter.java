package org.proteored.miapeapi.xml.gi.adapter;

import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.Algorithm;
import org.proteored.miapeapi.interfaces.gi.FeatureQuantitation;
import org.proteored.miapeapi.xml.gi.autogenerated.GIFeatureQuantitation;
import org.proteored.miapeapi.xml.gi.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.gi.util.GIControlVocabularyXmlFactory;

public class FeatureQuantitationAdapter implements Adapter<GIFeatureQuantitation> {
	private final FeatureQuantitation featureQuantitation;
	private final ObjectFactory factory;
	private final GIControlVocabularyXmlFactory cvFactory;
	public FeatureQuantitationAdapter(FeatureQuantitation featureQuantitation,
			ObjectFactory factory, GIControlVocabularyXmlFactory cvFactory) {
		this.factory = factory;
		this.featureQuantitation = featureQuantitation;
		this.cvFactory = cvFactory;
	}

	@Override
	public GIFeatureQuantitation adapt() {
		GIFeatureQuantitation xmlFeatureQuantitation = factory.createGIFeatureQuantitation();
		xmlFeatureQuantitation.setName(featureQuantitation.getName());
		xmlFeatureQuantitation.setStepOrder(featureQuantitation.getStepOrder());
		xmlFeatureQuantitation.setType(featureQuantitation.getType());
		for (Algorithm algorithm : featureQuantitation.getFeatureQuantitationAlgorithms()) {
			xmlFeatureQuantitation.getGIFeatureQuantitationAlgorithm().add(new AlgorithmAdapter(algorithm, factory, cvFactory).adapt());
		}
		for (Algorithm algorithm : featureQuantitation.getFeatureQuantitationBackgrounds()) {
			xmlFeatureQuantitation.getGIFeatureQuantitationBackground().add(new AlgorithmAdapter(algorithm, factory, cvFactory).adapt());
		}
		for (Algorithm algorithm : featureQuantitation.getFeatureQuantitationNormalizations()) {
			xmlFeatureQuantitation.getGIFeatureQuantitationNormalization().add(new AlgorithmAdapter(algorithm, factory, cvFactory).adapt());
		}
		return xmlFeatureQuantitation;
	}

}
