package org.proteored.miapeapi.xml.mzidentml.adapter;

import org.proteored.miapeapi.cv.msi.DatabaseName;
import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.msi.Database;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.PSIPIAnalysisSearchSearchDatabaseType;
import org.proteored.miapeapi.xml.mzidentml.util.MzidentmlControlVocabularyXmlFactory;
import org.proteored.miapeapi.xml.mzidentml.util.Utils;

public class PSIPIAnalysisSearchSearchDatabaseTypeAdapter implements
		Adapter<PSIPIAnalysisSearchSearchDatabaseType> {
	private final Database database;
	private final ObjectFactory factory;
	private final MzidentmlControlVocabularyXmlFactory cvFactory;

	public PSIPIAnalysisSearchSearchDatabaseTypeAdapter(Database database, ObjectFactory factory,
			MzidentmlControlVocabularyXmlFactory cvFactory) {
		this.cvFactory = cvFactory;
		this.database = database;
		this.factory = factory;
	}

	@Override
	public PSIPIAnalysisSearchSearchDatabaseType adapt() {
		PSIPIAnalysisSearchSearchDatabaseType databaseXML = factory
				.createPSIPIAnalysisSearchSearchDatabaseType();
		databaseXML.setDatabaseName(cvFactory.createCV(database.getName(), null,
				DatabaseName.getInstance(cvFactory.getCvManager())));
		databaseXML.setId(Utils.getIdFromString(database.getName()));
		databaseXML.setLocation(database.getUri());
		try {
			databaseXML.setNumDatabaseSequences(new Long(database.getSequenceNumber()));
		} catch (NumberFormatException e) {
			// do nothing
		}
		databaseXML.setReleaseDate(database.getDate());
		databaseXML.setVersion(database.getNumVersion());
		return databaseXML;
	}

}
