package org.proteored.miapeapi.xml.mzidentml;

import java.util.Collections;
import java.util.List;
import java.util.Set;

import org.proteored.miapeapi.interfaces.Software;
import org.proteored.miapeapi.interfaces.msi.AdditionalParameter;
import org.proteored.miapeapi.interfaces.msi.Database;
import org.proteored.miapeapi.interfaces.msi.InputParameter;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.FilterType;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.FuGECommonOntologyParamType;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.PSIPIAnalysisSearchEnzymeType;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.PSIPIAnalysisSearchSearchDatabaseType;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.PSIPIAnalysisSearchSearchModificationType;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.PSIPIAnalysisSearchSpectrumIdentificationListType;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.PSIPIAnalysisSearchSpectrumIdentificationProtocolType;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.PSIPIAnalysisSearchSpectrumIdentificationType;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.SearchDatabaseType;
import org.proteored.miapeapi.xml.mzidentml.util.MzidentmlControlVocabularyXmlFactory;

import gnu.trove.set.hash.THashSet;

public class InputParameterImplOLD implements InputParameter {
	private final Set<PSIPIAnalysisSearchSearchDatabaseType> xmlDatabases;
	private final PSIPIAnalysisSearchSpectrumIdentificationProtocolType protocol;
	private final List<PSIPIAnalysisSearchSpectrumIdentificationListType> spectrumIdentificationLists;
	private final List<PSIPIAnalysisSearchEnzymeType> enzymes;
	private final PSIPIAnalysisSearchSpectrumIdentificationType spectrumIdentification;

	public InputParameterImplOLD(Set<PSIPIAnalysisSearchSearchDatabaseType> xmlDatabases,
			PSIPIAnalysisSearchSpectrumIdentificationProtocolType protocol,
			List<PSIPIAnalysisSearchSpectrumIdentificationListType> spectrumIdentificationLists,
			List<PSIPIAnalysisSearchSpectrumIdentificationType> spectrumIdentifications) {
		this.xmlDatabases = xmlDatabases;
		this.protocol = protocol;
		this.spectrumIdentificationLists = spectrumIdentificationLists;
		this.spectrumIdentification = getSpectrumIdentification(spectrumIdentifications);
		if (protocol.getEnzymes() != null) {
			this.enzymes = protocol.getEnzymes().getEnzyme();
		} else {
			this.enzymes = Collections.emptyList();
		}
	}

	@Override
	public String getAaModif() {
		if (protocol.getModificationParams() != null) {
			List<PSIPIAnalysisSearchSearchModificationType> modifications = protocol.getModificationParams()
					.getSearchModification();
			StringBuilder sb = new StringBuilder();
			// fix mode if false --> Variable true --> Fixed
			// Add CV

			for (PSIPIAnalysisSearchSearchModificationType modification : modifications) {
				sb.append(
						MzidentmlControlVocabularyXmlFactory.readEntireParam(modification.getModParam().getCvParam()));

				if (modification.isFixedMod()) {
					sb.append("Fixed");
					sb.append(";");
				} else {
					sb.append("Variable");
					sb.append(";");
				}
				if (modification.getModParam().getMassDelta() != 0) {
					sb.append("Mass Delta: ");
					sb.append(modification.getModParam().getMassDelta());
					sb.append(";");
				}

				if (modification.getModParam().getResidues().size() > 0) {
					sb.append("Residue(s): ");
					int count = 0;
					for (String residue : modification.getModParam().getResidues()) {
						sb.append(residue);
						count++;
						if (count < modification.getModParam().getResidues().size()) {
							sb.append(",");
						}
					}
					sb.append("; ");
				}

			}
		}
		return null;
	}

	@Override
	public String getAdditionalCleavages() {
		StringBuilder sb = new StringBuilder();
		if (enzymes.size() > 1) {
			List<PSIPIAnalysisSearchEnzymeType> additionalEnzymes = enzymes.subList(1, enzymes.size() - 1);
			for (PSIPIAnalysisSearchEnzymeType enzyme : additionalEnzymes) {
				sb.append(MzidentmlControlVocabularyXmlFactory.readEntireParamList(enzyme.getEnzymeName()));
				sb.append(";");
			}
		}

		return sb.toString();
	}

	@Override
	public String getCleavageName() {
		StringBuilder sb = new StringBuilder();
		// TODO: it is only allowed one enzyme, the second one will be skipped
		if (enzymes.size() > 0) {
			PSIPIAnalysisSearchEnzymeType enzyme = enzymes.get(0);
			sb.append(MzidentmlControlVocabularyXmlFactory.readEntireParamList(enzyme.getEnzymeName()));
		}

		return sb.toString();
	}

	@Override
	public String getCleavageRules() {
		StringBuilder sb = new StringBuilder();
		for (PSIPIAnalysisSearchEnzymeType enzyme : enzymes) {
			if (enzyme.getSiteRegexp() != null) {
				sb.append("Site Regular Expresion: ");
				sb.append(enzyme.getSiteRegexp());
				sb.append("; ");
			}
		}

		return sb.toString();
	}

	@Override
	public Set<Database> getDatabases() {
		if (xmlDatabases == null || xmlDatabases.size() == 0)
			return null;
		Set<Database> databases = new THashSet<Database>();
		Set<PSIPIAnalysisSearchSearchDatabaseType> xmlProtocolDatabases = new THashSet<PSIPIAnalysisSearchSearchDatabaseType>();
		for (PSIPIAnalysisSearchSearchDatabaseType xmlDatabase : xmlDatabases) {
			List<SearchDatabaseType> searchDatabases = spectrumIdentification.getSearchDatabase();
			for (SearchDatabaseType searchDatabaseType : searchDatabases) {
				if (searchDatabaseType.getSearchDatabaseRef().equals(xmlDatabase.getId())) {
					xmlProtocolDatabases.add(xmlDatabase);
				}

			}
		}
		for (PSIPIAnalysisSearchSearchDatabaseType xmlDatabase : xmlProtocolDatabases) {
			databases.add(new DatabaseImpl(xmlDatabase));
		}

		return databases;
	}

	@Override
	public String getFragmentMassTolerance() {
		if (protocol.getFragmentTolerance() != null) {
			return MzidentmlControlVocabularyXmlFactory
					.readEntireCVParamList(protocol.getFragmentTolerance().getCvParam(), false);
		}
		return null;
	}

	@Override
	public String getFragmentMassToleranceUnit() {
		if (protocol.getFragmentTolerance() != null) {
			return MzidentmlControlVocabularyXmlFactory
					.readFirstUnitCVParamList(protocol.getFragmentTolerance().getCvParam());
		}
		return null;
	}

	@Override
	public String getMinScore() {
		StringBuilder sb = new StringBuilder();
		if (enzymes.size() > 0) {
			for (PSIPIAnalysisSearchEnzymeType enzyme : enzymes) {
				if (enzyme.getMinDistance() != null) {
					sb.append(enzyme.getMinDistance());
				}
			}
		}

		return sb.toString();
	}

	@Override
	public String getMisscleavages() {
		StringBuilder sb = new StringBuilder();
		if (enzymes.size() > 0) {
			for (PSIPIAnalysisSearchEnzymeType enzyme : enzymes) {
				if (enzyme.getMissedCleavages() != null) {
					sb.append(enzyme.getMissedCleavages().doubleValue());
				}
			}
		}
		return sb.toString();
	}

	@Override
	public String getName() {
		return protocol.getId();
	}

	@Override
	public String getNumEntries() {
		StringBuilder sb = new StringBuilder();
		PSIPIAnalysisSearchSpectrumIdentificationListType spectrumIdentificationList = null;
		for (PSIPIAnalysisSearchSpectrumIdentificationListType xmlSpectrumIdentificationList : spectrumIdentificationLists) {
			if (xmlSpectrumIdentificationList.getId()
					.equals(spectrumIdentification.getSpectrumIdentificationListRef())) {
				spectrumIdentificationList = xmlSpectrumIdentificationList;
			}
		}
		if (spectrumIdentificationList != null) {
			if (spectrumIdentificationList.getName() != null) {
				sb.append(spectrumIdentificationList.getName());
				sb.append(": ");
			} else if (spectrumIdentificationList.getId() != null) {
				sb.append(spectrumIdentificationList.getId());
				sb.append(": ");
			}

			sb.append(spectrumIdentificationList.getNumSequencesSearched());
			sb.append(";");
		}
		return sb.toString();
	}

	@Override
	public String getPmfMassTolerance() {
		if (protocol.getFragmentTolerance() == null && protocol.getParentTolerance() != null) {
			return MzidentmlControlVocabularyXmlFactory
					.readEntireCVParamList(protocol.getParentTolerance().getCvParam(), false);
		}
		return null;
	}

	@Override
	public String getPmfMassToleranceUnit() {
		if (protocol.getFragmentTolerance() == null && protocol.getParentTolerance() != null) {
			return MzidentmlControlVocabularyXmlFactory
					.readFirstUnitCVParamList(protocol.getParentTolerance().getCvParam());
		}
		return null;
	}

	@Override
	public String getPrecursorMassTolerance() {
		if (protocol.getFragmentTolerance() != null && protocol.getParentTolerance() != null) {
			return MzidentmlControlVocabularyXmlFactory
					.readEntireCVParamList(protocol.getParentTolerance().getCvParam(), false);
		}
		return null;
	}

	@Override
	public String getPrecursorMassToleranceUnit() {
		if (protocol.getFragmentTolerance() != null && protocol.getParentTolerance() != null) {
			return MzidentmlControlVocabularyXmlFactory
					.readFirstUnitCVParamList(protocol.getParentTolerance().getCvParam());
		}
		return null;
	}

	@Override
	public String getTaxonomy() {
		StringBuilder sb = new StringBuilder();
		if (protocol.getDatabaseFilters() == null)
			return null;
		List<FilterType> filters = protocol.getDatabaseFilters().getFilter();
		for (FilterType filterType : filters) {
			if (filterType.getFilterType() != null) {
				sb.append("FilterType: ");
				sb.append(MzidentmlControlVocabularyXmlFactory.readEntireParam(filterType.getFilterType()));
				sb.append(";");
			}

			if (filterType.getExclude() != null) {
				sb.append("Exclude: ");
				sb.append(MzidentmlControlVocabularyXmlFactory.readEntireParamList(filterType.getExclude()));
				sb.append(";");
			}
			if (filterType.getInclude() != null) {
				sb.append("Include: ");
				sb.append(MzidentmlControlVocabularyXmlFactory.readEntireParamList(filterType.getInclude()));
				sb.append(";");
			}
		}

		return sb.toString();
	}

	private PSIPIAnalysisSearchSpectrumIdentificationType getSpectrumIdentification(
			List<PSIPIAnalysisSearchSpectrumIdentificationType> spectrumIdentifications) {
		for (PSIPIAnalysisSearchSpectrumIdentificationType spectrumIdentification : spectrumIdentifications) {
			if (spectrumIdentification.getSpectrumIdentificationProtocolRef().equals(protocol.getId())) {
				return spectrumIdentification;
			}
		}
		return null;
	}

	@Override
	public String toString() {
		return "InputParameterImpl [getAaModif()=" + getAaModif() + ", getAdditionalCleavages()="
				+ getAdditionalCleavages() + ", getCleavageName()=" + getCleavageName() + ", getCleavageRules()="
				+ getCleavageRules() + ", getDatabases()=" + getDatabases() + ", getFragmentMassTolerance()="
				+ getFragmentMassTolerance() + ", getFragmentMassToleranceUnit()=" + getFragmentMassToleranceUnit()
				+ ", getMinScore()=" + getMinScore() + ", getMisscleavages()=" + getMisscleavages() + ", getName()="
				+ getName() + ", getNumEntries()=" + getNumEntries() + ", getPmfMassTolerance()="
				+ getPmfMassTolerance() + ", getPmfMassToleranceUnit()=" + getPmfMassToleranceUnit()
				+ ", getPrecursorMassTolerance()=" + getPrecursorMassTolerance() + ", getPrecursorMassToleranceUnit()="
				+ getPrecursorMassToleranceUnit() + ", getScoringAlgorithm()=" + getScoringAlgorithm()
				+ ", getTaxonomy()=" + getTaxonomy() + "]";
	}

	@Override
	public Set<AdditionalParameter> getAdditionalParameters() {
		Set<AdditionalParameter> result = new THashSet<AdditionalParameter>();

		/* Additional params from the enzyme */
		for (PSIPIAnalysisSearchEnzymeType enzyme : enzymes) {
			if (enzyme.getCTermGain() != null) {
				result.add(new AdditionalParameterImpl("C Term Gain", enzyme.getCTermGain()));
			}
			if (enzyme.getNTermGain() != null) {
				result.add(new AdditionalParameterImpl("N Term Gain", enzyme.getNTermGain()));
			}
		}
		/* Additional params from AdditionalSearchParams */
		if (protocol.getAdditionalSearchParams() != null) {

			List<FuGECommonOntologyParamType> parameters = protocol.getAdditionalSearchParams().getParamGroup();
			for (FuGECommonOntologyParamType param : parameters) {
				if (param != null) {
					StringBuilder wkName = new StringBuilder();
					StringBuilder wkValue = new StringBuilder();
					if (param.getValue() == null) {
						wkName.append(param.getName());
					} else {
						wkName.append(param.getName());
						wkValue.append(param.getValue());
					}
					if (param.getUnitName() != null) {
						wkValue.append(" " + param.getUnitName());
					}
					result.add(new AdditionalParameterImpl(wkName.toString(), wkValue.toString()));
				}
			}
		}

		// TODO
		// AnalysisProtocolCollection/ProteinDetectionProtocol/AnalysisParams/cvParam
		return result;

	}

	@Override
	public String getScoringAlgorithm() {
		// TODO children from Phenyx:Scoring Model MS:1001376
		// TODO
		// AnalysisProtocolCollection/SpectrumIdentificationProtocol/AdditionalSearchParams/cvParam
		return null;
	}

	@Override
	public String getSearchType() {
		return MzidentmlControlVocabularyXmlFactory.readNameParam(protocol.getSearchType());
	}

	@Override
	public int getId() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public Software getSoftware() {
		// TODO Auto-generated method stub
		return null;
	}

}
