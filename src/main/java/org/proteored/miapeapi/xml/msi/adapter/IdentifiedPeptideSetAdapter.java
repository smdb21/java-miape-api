package org.proteored.miapeapi.xml.msi.adapter;

import java.util.List;

import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.msi.IdentifiedPeptide;
import org.proteored.miapeapi.xml.msi.autogenerated.MSIIdentifiedPeptideSet;
import org.proteored.miapeapi.xml.msi.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.msi.util.MSIControlVocabularyXmlFactory;

public class IdentifiedPeptideSetAdapter implements
		Adapter<MSIIdentifiedPeptideSet> {
	private final List<IdentifiedPeptide> identifiedPeptides;
	private final ObjectFactory factory;
	private final MSIControlVocabularyXmlFactory cvFactory;
	private static org.apache.log4j.Logger log = org.apache.log4j.Logger
			.getLogger("log4j.logger.org.proteored");

	public IdentifiedPeptideSetAdapter(
			List<IdentifiedPeptide> identifiedPeptides, ObjectFactory factory,
			MSIControlVocabularyXmlFactory cvFactory) {
		this.identifiedPeptides = identifiedPeptides;
		this.factory = factory;
		this.cvFactory = cvFactory;
	}

	@Override
	public MSIIdentifiedPeptideSet adapt() {
		MSIIdentifiedPeptideSet ret = factory.createMSIIdentifiedPeptideSet();

		if (identifiedPeptides != null && !identifiedPeptides.isEmpty()) {
			log.info("Adapting " + identifiedPeptides.size() + " peptdes");
			int i = 1;
			for (IdentifiedPeptide peptide : identifiedPeptides) {

				ret.getMSIIdentifiedPeptide().add(
						new IdentifiedPeptideAdapter(peptide, factory,
								cvFactory).adapt());
				log.debug(i + "/" + identifiedPeptides.size()
						+ " of the peptides");
				i++;
			}

		}
		return ret;
	}

}
