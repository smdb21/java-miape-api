package org.proteored.miapeapi.xml.msi.adapter;

import java.util.List;

import org.proteored.miapeapi.cv.PSIModOntology;
import org.proteored.miapeapi.cv.UNIMODOntology;
import org.proteored.miapeapi.cv.msi.PeptideModificationName;
import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.msi.PeptideModification;
import org.proteored.miapeapi.xml.msi.autogenerated.FuGECommonOntologyCvParamType;
import org.proteored.miapeapi.xml.msi.autogenerated.MSIPeptideModification;
import org.proteored.miapeapi.xml.msi.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.msi.autogenerated.ParamType;
import org.proteored.miapeapi.xml.msi.util.MSIControlVocabularyXmlFactory;

import uk.ac.ebi.pride.utilities.pridemod.ModReader;
import uk.ac.ebi.pride.utilities.pridemod.model.PTM;
import uk.ac.ebi.pride.utilities.pridemod.model.Specificity;

public class PeptideModificationAdapter implements Adapter<MSIPeptideModification> {
	private final PeptideModification modification;
	private final ObjectFactory factory;
	private final MSIControlVocabularyXmlFactory cvFactory;

	public PeptideModificationAdapter(PeptideModification modification, ObjectFactory factory,
			MSIControlVocabularyXmlFactory cvFactory) {
		this.modification = modification;
		this.cvFactory = cvFactory;
		this.factory = factory;
	}

	@Override
	public MSIPeptideModification adapt() {
		if (modification != null) {
			final MSIPeptideModification xmlModification = factory.createMSIPeptideModification();
			final ModReader modReader = ModReader.getInstance();
			final List<PTM> ptmListByEqualName = modReader.getPTMListByEqualName(modification.getName());
			if (!ptmListByEqualName.isEmpty()) {
				final PTM ptm = ptmListByEqualName.get(0);
				final ParamType paramType = factory.createParamType();
				final FuGECommonOntologyCvParamType cvParam = factory.createFuGECommonOntologyCvParamType();
				cvParam.setAccession(ptm.getAccession());
				cvParam.setName(ptm.getName());
				if (ptm.getAccession().startsWith("UNIMOD")) {
					cvParam.setCvRef(UNIMODOntology.getCVLabel());
				} else {
					cvParam.setCvRef(PSIModOntology.getCVLabel());
				}
				paramType.setCvParam(cvParam);
				xmlModification.setName(paramType);
			} else {

				// search by delta mass
				if (modification.getMonoDelta() != null) {
					List<PTM> ptmListByMonoDelta = modReader.getPTMListByMonoDeltaMass(modification.getMonoDelta(),
							0.0001);
					if (ptmListByMonoDelta == null || ptmListByMonoDelta.isEmpty()) {
						ptmListByMonoDelta = modReader.getPTMListByMonoDeltaMass(modification.getMonoDelta(), 0.001);
					}
					if (!ptmListByMonoDelta.isEmpty()) {
						final PTM ptm = ptmListByMonoDelta.get(0);
						final ParamType paramType = factory.createParamType();
						final FuGECommonOntologyCvParamType cvParam = factory.createFuGECommonOntologyCvParamType();
						cvParam.setAccession(ptm.getAccession());
						cvParam.setName(ptm.getName());
						if (ptm.getAccession().startsWith("UNIMOD")) {
							cvParam.setCvRef(UNIMODOntology.getCVLabel());
						} else {
							cvParam.setCvRef(PSIModOntology.getCVLabel());
						}
						paramType.setCvParam(cvParam);
						xmlModification.setName(paramType);
					}
				}
				if (xmlModification.getName() == null) {
					// filter by residues
					if (modification.getResidues() != null && !"".equals(modification.getResidues())) {
						final List<PTM> ptmListBySpecificity = modReader.getPTMListBySpecificity(
								new Specificity(String.valueOf(modification.getResidues().charAt(0)),
										String.valueOf(modification.getPosition())));
						if (!ptmListBySpecificity.isEmpty()) {
							final PTM ptm = ptmListBySpecificity.get(0);
							final ParamType paramType = factory.createParamType();
							final FuGECommonOntologyCvParamType cvParam = factory.createFuGECommonOntologyCvParamType();
							cvParam.setAccession(ptm.getAccession());
							cvParam.setName(ptm.getName());
							if (ptm.getAccession().startsWith("UNIMOD")) {
								cvParam.setCvRef(UNIMODOntology.getCVLabel());
							} else {
								cvParam.setCvRef(PSIModOntology.getCVLabel());
							}
							paramType.setCvParam(cvParam);
							xmlModification.setName(paramType);
						}
					}
				}
				if (xmlModification.getName() == null) {
					final ParamType paramType = cvFactory.createCV(modification.getName(), null,
							PeptideModificationName.getInstance(cvFactory.getCvManager()));
					xmlModification.setName(paramType);
				}
			}
			xmlModification.setAvgDelta(modification.getAvgDelta());
			xmlModification.setMonoDelta(modification.getMonoDelta());
			xmlModification.setPosition(modification.getPosition());
			xmlModification.setResidues(modification.getResidues());
			xmlModification.setReplacementResidue(modification.getReplacementResidue());
			xmlModification.setNeutralLoss(modification.getNeutralLoss());
			xmlModification.setEvidence(modification.getModificationEvidence());
			return xmlModification;
		}
		return null;
	}

}
