package org.proteored.miapeapi.xml.msi.adapter;

import java.io.IOException;
import java.net.URL;

import org.proteored.miapeapi.cv.PSIModOntology;
import org.proteored.miapeapi.cv.msi.PeptideModificationName;
import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.msi.PeptideModification;
import org.proteored.miapeapi.xml.msi.autogenerated.FuGECommonOntologyCvParamType;
import org.proteored.miapeapi.xml.msi.autogenerated.MSIPeptideModification;
import org.proteored.miapeapi.xml.msi.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.msi.autogenerated.ParamType;
import org.proteored.miapeapi.xml.msi.util.MSIControlVocabularyXmlFactory;
import org.springframework.core.io.ClassPathResource;

import uk.ac.ebi.pridemod.PrideModController;
import uk.ac.ebi.pridemod.slimmod.model.SlimModCollection;
import uk.ac.ebi.pridemod.slimmod.model.SlimModification;

public class PeptideModificationAdapter implements
		Adapter<MSIPeptideModification> {
	private static SlimModCollection preferredModifications;
	private final PeptideModification modification;
	private final ObjectFactory factory;
	private final MSIControlVocabularyXmlFactory cvFactory;
	ClassPathResource resource = new ClassPathResource(
			"modification_mappings.xml");

	public PeptideModificationAdapter(PeptideModification modification,
			ObjectFactory factory, MSIControlVocabularyXmlFactory cvFactory) {
		this.modification = modification;
		this.cvFactory = cvFactory;
		this.factory = factory;
	}

	@Override
	public MSIPeptideModification adapt() {
		if (modification != null) {
			MSIPeptideModification xmlModification = factory
					.createMSIPeptideModification();
			SlimModCollection modificationMapping = getModificationMapping();
			SlimModification slimMod = modificationMapping
					.getbyName(modification.getName());
			if (slimMod == null) {
				// search by delta mass
				if (modification.getMonoDelta() != null)
					modificationMapping = modificationMapping.getbyDelta(
							modification.getMonoDelta(), 0.001);
				// filter by residues
				if (modificationMapping.size() > 1
						&& modification.getResidues() != null
						&& !"".equals(modification.getResidues())
						&& !modificationMapping.isEmpty())
					modificationMapping = modificationMapping
							.getbySpecificity(modification.getResidues());
				// if just there is one, take the first
				if (modificationMapping.size() == 1)
					slimMod = modificationMapping.get(0);
			}
			if (slimMod != null) {
				final ParamType paramType = factory.createParamType();
				FuGECommonOntologyCvParamType cvParam = factory
						.createFuGECommonOntologyCvParamType();
				cvParam.setAccession(slimMod.getIdPsiMod());
				cvParam.setName(slimMod.getPsiModDesc());
				cvParam.setCvRef(PSIModOntology.getCVLabel());
				paramType.setCvParam(cvParam);
				xmlModification.setName(paramType);
			} else {
				final ParamType paramType = cvFactory.createCV(modification
						.getName(), null, PeptideModificationName
						.getInstance(cvFactory.getCvManager()));
				xmlModification.setName(paramType);
			}
			xmlModification.setAvgDelta(modification.getAvgDelta());
			xmlModification.setMonoDelta(modification.getMonoDelta());
			xmlModification.setPosition(modification.getPosition());
			xmlModification.setResidues(modification.getResidues());
			xmlModification.setReplacementResidue(modification
					.getReplacementResidue());
			xmlModification.setNeutralLoss(modification.getNeutralLoss());
			xmlModification.setEvidence(modification.getModificationEvidence());
			return xmlModification;
		}
		return null;
	}

	private SlimModCollection getModificationMapping() {
		if (PeptideModificationAdapter.preferredModifications == null) {
			URL url;
			try {
				url = resource.getURL();
				PeptideModificationAdapter.preferredModifications = PrideModController
						.parseSlimModCollection(url);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return PeptideModificationAdapter.preferredModifications;
	}
}
