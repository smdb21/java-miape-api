package org.proteored.miapeapi.xml.msi.adapter;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.proteored.miapeapi.interfaces.msi.IdentifiedPeptide;
import org.proteored.miapeapi.xml.msi.autogenerated.MSIIdentifiedPeptide;
import org.proteored.miapeapi.xml.msi.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.msi.util.MSIControlVocabularyXmlFactory;

import edu.scripps.yates.utilities.pi.ParIterator;
import edu.scripps.yates.utilities.pi.reductions.Reducible;

public class IdentifiedPeptideParallelProcessor extends Thread {
	private static Logger log = Logger.getLogger("log4j.logger.org.proteored");

	private final ParIterator<IdentifiedPeptide> iterator;
	private final Reducible<List<MSIIdentifiedPeptide>> localPeptides;
	private final ObjectFactory factory;
	private final MSIControlVocabularyXmlFactory cvFactory;

	private final int numThread;

	public IdentifiedPeptideParallelProcessor(int numCore, ParIterator<IdentifiedPeptide> iterator,
			Reducible<List<MSIIdentifiedPeptide>> localPeptides, ObjectFactory factory,
			MSIControlVocabularyXmlFactory cvFactory) {
		numThread = numCore;
		this.iterator = iterator;
		this.localPeptides = localPeptides;
		this.factory = factory;
		this.cvFactory = cvFactory;
	}

	@Override
	public void run() {
		log.info("Starting parallel processing of peptides from thread " + numThread);
		List<MSIIdentifiedPeptide> xmlPeptides = new ArrayList<MSIIdentifiedPeptide>();
		localPeptides.set(xmlPeptides);
		while (iterator.hasNext()) {
			try {
				final IdentifiedPeptide peptide = iterator.next();
				xmlPeptides.add(new IdentifiedPeptideAdapter(peptide, factory, cvFactory).adapt());
			} catch (Exception e) {
				log.warn(e);
				iterator.register(e);
			}

		}
		log.info("Thread " + numThread + " processed " + xmlPeptides.size() + " peptides");
	}

}
