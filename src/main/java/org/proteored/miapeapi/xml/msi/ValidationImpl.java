package org.proteored.miapeapi.xml.msi;

import java.util.HashSet;
import java.util.Set;

import org.proteored.miapeapi.interfaces.Software;
import org.proteored.miapeapi.interfaces.msi.Validation;
import org.proteored.miapeapi.interfaces.msi.PostProcessingMethod;
import org.proteored.miapeapi.xml.msi.autogenerated.MIAPEAlgorithmType;
import org.proteored.miapeapi.xml.msi.autogenerated.MIAPESoftwareType;
import org.proteored.miapeapi.xml.msi.autogenerated.MSIValidation;

public class ValidationImpl implements Validation {
	private final MSIValidation xmlValidation;

	public ValidationImpl(MSIValidation xmlValidation) {
		this.xmlValidation = xmlValidation;
	}

	@Override
	public String getName() {
		return xmlValidation.getName();
	}

	@Override
	public String getStatisticalAnalysisResults() {
		return xmlValidation.getStatisticalAnalysisResults();
	}

	@Override
	public Set<PostProcessingMethod> getPostProcessingMethods() {
		Set<PostProcessingMethod> algorithms = new HashSet<PostProcessingMethod>();
		for (MIAPEAlgorithmType algorithm : xmlValidation.getMSIPostProcessingMethod()) {
			algorithms.add(new ValidationAlgorithmImpl(algorithm));
		}
		return algorithms;
	}

	@Override
	public Set<Software> getPostProcessingSoftwares() {
		Set<Software> softwares = new HashSet<Software>();
		for (MIAPESoftwareType software : xmlValidation.getMSIPostProcessingSoftware()) {
			softwares.add(new SoftwareImpl(software));
		}
		return softwares;
	}

	@Override
	public String getGlobalThresholds() {
		return xmlValidation.getGlobalThresholds();
	}

}
