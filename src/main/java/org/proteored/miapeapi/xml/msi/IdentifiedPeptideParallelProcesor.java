package org.proteored.miapeapi.xml.msi;

import java.util.HashMap;
import java.util.Map;

import org.proteored.miapeapi.interfaces.msi.IdentifiedPeptide;
import org.proteored.miapeapi.xml.msi.autogenerated.MSIIdentifiedPeptide;
import org.proteored.miapeapi.xml.msi.autogenerated.MSIInputData;
import org.proteored.miapeapi.xml.util.MiapeXmlUtil;

import pi.ParIterator;
import pi.reductions.Reducible;

public class IdentifiedPeptideParallelProcesor extends Thread {

	private final ParIterator<MSIIdentifiedPeptide> iterator;
	private final Reducible<Map<String, IdentifiedPeptide>> reduciblePeptideMap;
	private final Map<String, MSIInputData> mapInputData;

	public IdentifiedPeptideParallelProcesor(
			ParIterator<MSIIdentifiedPeptide> iterator,
			Reducible<Map<String, IdentifiedPeptide>> reduciblePeptideMap,
			Map<String, MSIInputData> mapInputData) {
		this.iterator = iterator;
		this.reduciblePeptideMap = reduciblePeptideMap;
		this.mapInputData = mapInputData;
	}

	@Override
	public void run() {
		Map<String, IdentifiedPeptide> peptideMap = new HashMap<String, IdentifiedPeptide>();
		reduciblePeptideMap.set(peptideMap);
		while (iterator.hasNext()) {
			try {
				final MSIIdentifiedPeptide msiIdentifiedPeptide = iterator
						.next();
				int id = MiapeXmlUtil.getIdFromXMLId(msiIdentifiedPeptide
						.getId());
				if (id == -1) {
					id = MiapeXmlUtil.PeptideCounter.increaseCounter();
					msiIdentifiedPeptide
							.setId(MiapeXmlUtil.IdentifierPrefixes.PEPTIDE
									.getPrefix() + id);
				}
				peptideMap.put(msiIdentifiedPeptide.getId(),
						new IdentifiedPeptideImpl(msiIdentifiedPeptide,
								mapInputData));
			} catch (Exception e) {
				iterator.register(e);
			}
		}

	}
}
