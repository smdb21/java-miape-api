package org.proteored.miapeapi.xml.msi;

import java.util.Map;
import java.util.Set;

import org.proteored.miapeapi.interfaces.Software;
import org.proteored.miapeapi.interfaces.msi.AdditionalParameter;
import org.proteored.miapeapi.interfaces.msi.Database;
import org.proteored.miapeapi.interfaces.msi.InputParameter;
import org.proteored.miapeapi.xml.msi.autogenerated.MSIDatabase;
import org.proteored.miapeapi.xml.msi.autogenerated.MSIInputParameters;
import org.proteored.miapeapi.xml.msi.autogenerated.MSISoftwareType;
import org.proteored.miapeapi.xml.msi.autogenerated.ParamType;
import org.proteored.miapeapi.xml.msi.util.MSIControlVocabularyXmlFactory;
import org.proteored.miapeapi.xml.util.MiapeXmlUtil;

import gnu.trove.set.hash.THashSet;

public class InputParameterImpl implements InputParameter {
	private final MSIInputParameters xmlInputParameter;
	private final Map<String, MSISoftwareType> mapSoftware;

	public InputParameterImpl(MSIInputParameters xmlInputParameter, Map<String, MSISoftwareType> mapSoftware) {
		this.xmlInputParameter = xmlInputParameter;
		this.mapSoftware = mapSoftware;
	}

	@Override
	public String getAaModif() {
		return xmlInputParameter.getAAModif();
	}

	@Override
	public String getAdditionalCleavages() {
		return xmlInputParameter.getAdditionalCleavages();
	}

	@Override
	public Set<AdditionalParameter> getAdditionalParameters() {
		Set<AdditionalParameter> additionalParameters = new THashSet<AdditionalParameter>();
		for (ParamType xmlAdditionalParameter : xmlInputParameter.getMSIAdditionalParameter()) {
			additionalParameters.add(new AdditionalParameterImpl(xmlAdditionalParameter));
		}
		return additionalParameters;
	}

	@Override
	public String getCleavageName() {
		return MSIControlVocabularyXmlFactory.getName(xmlInputParameter.getCleavageName());
	}

	@Override
	public String getCleavageRules() {
		return xmlInputParameter.getCleavageRules();
	}

	@Override
	public Set<Database> getDatabases() {
		Set<Database> databases = new THashSet<Database>();
		for (MSIDatabase xmlDatabase : xmlInputParameter.getMSIDatabase()) {
			databases.add(new DatabaseImpl(xmlDatabase));
		}
		return databases;
	}

	@Override
	public String getFragmentMassTolerance() {
		return MSIControlVocabularyXmlFactory.getValue(xmlInputParameter.getFragmentMassTolerance());
	}

	@Override
	public String getFragmentMassToleranceUnit() {
		return MSIControlVocabularyXmlFactory.getUnitName(xmlInputParameter.getFragmentMassTolerance());
	}

	@Override
	public String getMinScore() {
		return xmlInputParameter.getMinScore();
	}

	@Override
	public String getMisscleavages() {
		return xmlInputParameter.getMisscleavages();
	}

	@Override
	public String getName() {
		return xmlInputParameter.getName();
	}

	@Override
	public String getNumEntries() {
		return xmlInputParameter.getNumEntries();
	}

	@Override
	public String getPmfMassTolerance() {
		return MSIControlVocabularyXmlFactory.getValue(xmlInputParameter.getPMFMassTolerance());

	}

	@Override
	public String getPmfMassToleranceUnit() {
		return MSIControlVocabularyXmlFactory.getUnitName(xmlInputParameter.getPMFMassTolerance());
	}

	@Override
	public String getPrecursorMassTolerance() {
		return MSIControlVocabularyXmlFactory.getValue(xmlInputParameter.getPrecursorMassTolerance());

	}

	@Override
	public String getPrecursorMassToleranceUnit() {
		return MSIControlVocabularyXmlFactory.getUnitName(xmlInputParameter.getPrecursorMassTolerance());
	}

	@Override
	public String getTaxonomy() {
		return xmlInputParameter.getTaxonomy();
	}

	@Override
	public String getScoringAlgorithm() {
		return xmlInputParameter.getScoringAlgorithm();
	}

	@Override
	public String getSearchType() {
		return MSIControlVocabularyXmlFactory.getName(xmlInputParameter.getSearchType());
	}

	@Override
	public Software getSoftware() {
		if (mapSoftware.containsKey(xmlInputParameter.getSoftwareRef())) {
			return new SoftwareMSIImpl(mapSoftware.get(xmlInputParameter.getSoftwareRef()));
		}
		return null;
	}

	@Override
	public int getId() {
		return MiapeXmlUtil.getIdFromXMLId(xmlInputParameter.getId());
	}

}
