package org.proteored.miapeapi.xml.msi.adapter;

import java.util.List;
import java.util.Set;

import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.Algorithm;
import org.proteored.miapeapi.interfaces.Software;
import org.proteored.miapeapi.interfaces.msi.Validation;
import org.proteored.miapeapi.xml.msi.autogenerated.MIAPEAlgorithmType;
import org.proteored.miapeapi.xml.msi.autogenerated.MIAPESoftwareType;
import org.proteored.miapeapi.xml.msi.autogenerated.MSIValidation;
import org.proteored.miapeapi.xml.msi.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.msi.util.MSIControlVocabularyXmlFactory;

public class ValidationAdapter implements Adapter<MSIValidation> {
	private final Validation validation;
	private final ObjectFactory factory;
	private final MSIControlVocabularyXmlFactory cvFactory;

	public ValidationAdapter(Validation validation, ObjectFactory factory,
			MSIControlVocabularyXmlFactory cvFactory) {
		this.validation = validation;
		this.factory = factory;
		this.cvFactory = cvFactory;
	}

	@Override
	public MSIValidation adapt() {
		MSIValidation xmlValidation = factory.createMSIValidation();
		xmlValidation.setName(validation.getName());
		xmlValidation.setStatisticalAnalysisResults(validation.getStatisticalAnalysisResults());
		xmlValidation.setGlobalThresholds(validation.getGlobalThresholds());
		addSoftwares(xmlValidation.getMSIPostProcessingSoftware());
		addAlgorithms(xmlValidation.getMSIPostProcessingMethod());
		return xmlValidation;
	}

	private void addAlgorithms(List<MIAPEAlgorithmType> msiValidationMethod) {
		if (validation.getPostProcessingMethods() != null) {
			for (Algorithm algorithm : validation.getPostProcessingMethods()) {
				msiValidationMethod
						.add(new AlgorithmAdapter(algorithm, factory, cvFactory).adapt());
			}
		}

	}

	private void addSoftwares(List<MIAPESoftwareType> msiValidationSoftware) {
		final Set<Software> postProcessingSoftwares = validation.getPostProcessingSoftwares();
		if (postProcessingSoftwares != null) {
			for (Software software : postProcessingSoftwares) {
				msiValidationSoftware
						.add(new SoftwareAdapter(software, factory, cvFactory).adapt());
			}
		}

	}

}
