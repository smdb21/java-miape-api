package org.proteored.miapeapi.xml.ge;

import java.util.List;
import java.util.Set;

import org.proteored.miapeapi.interfaces.Buffer;
import org.proteored.miapeapi.interfaces.ge.ElectrophoresisProtocol;
import org.proteored.miapeapi.xml.ge.autogenerated.GEElectrophoresisProtocol;
import org.proteored.miapeapi.xml.ge.autogenerated.MIAPEBufferType;
import org.proteored.miapeapi.xml.util.MiapeXmlUtil;

import gnu.trove.set.hash.THashSet;

public class ElectrophoresisProtocolImpl implements ElectrophoresisProtocol {
	private final GEElectrophoresisProtocol eProtocolXML;

	public ElectrophoresisProtocolImpl(GEElectrophoresisProtocol geElectrophoresisProtocol) {
		this.eProtocolXML = geElectrophoresisProtocol;
	}

	@Override
	public Set<Buffer> getAdditionalBuffers() {
		Set<Buffer> setOfBuffers = new THashSet<Buffer>();
		List<MIAPEBufferType> bufferList = eProtocolXML.getGEEProtocolAdditionalBuffer();
		for (MIAPEBufferType miapeBufferItem : bufferList) {
			setOfBuffers.add(new BufferImpl(miapeBufferItem));
		}
		return setOfBuffers;
	}

	@Override
	public String getElectrophoresisConditions() {
		return eProtocolXML.getElectrophoresisConditions();
	}

	@Override
	public String getName() {
		return eProtocolXML.getName();
	}

	@Override
	public Set<Buffer> getRunningBuffers() {
		Set<Buffer> setOfBuffers = new THashSet<Buffer>();
		List<MIAPEBufferType> bufferList = eProtocolXML.getGERunningBuffer();
		for (MIAPEBufferType miapeBufferItem : bufferList) {
			setOfBuffers.add(new BufferImpl(miapeBufferItem));
		}
		return setOfBuffers;
	}

	@Override
	public int getId() {
		return MiapeXmlUtil.getIdFromXMLId(eProtocolXML.getId());
	}

}
