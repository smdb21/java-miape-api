package org.proteored.miapeapi.xml.ge;

import java.io.File;
import java.io.IOException;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.exceptions.IllegalMiapeArgumentException;
import org.proteored.miapeapi.exceptions.MiapeDatabaseException;
import org.proteored.miapeapi.exceptions.MiapeSecurityException;
import org.proteored.miapeapi.interfaces.ge.MiapeGEDocument;
import org.proteored.miapeapi.interfaces.persistence.PersistenceManager;
import org.proteored.miapeapi.interfaces.xml.MiapeXmlFile;
import org.proteored.miapeapi.interfaces.xml.XmlMiapeFactory;
import org.proteored.miapeapi.xml.ge.adapter.MiapeGeXMLAdapter;
import org.proteored.miapeapi.xml.ge.autogenerated.GEMIAPEGE;

import edu.scripps.yates.utilities.files.ZipManager;

/**
 * Class that provides the methods to convert a MIAPE GE XML to the MIAPE GE
 * model and vice versa.
 * 
 * @author Salvador
 * 
 */
public class MiapeGEXmlFactory implements XmlMiapeFactory<MiapeGEDocument> {
	private static MiapeGEXmlFactory instance;
	private JAXBContext jc;

	private MiapeGEXmlFactory() {
		try {
			jc = JAXBContext.newInstance("org.proteored.miapeapi.xml.ge.autogenerated");
		} catch (final JAXBException e) {
			e.printStackTrace();
		}
	}

	public static MiapeGEXmlFactory getFactory() {
		if (instance == null) {
			instance = new MiapeGEXmlFactory();
		}
		return instance;
	}

	@Override
	public MiapeGEDocument toDocument(MiapeXmlFile<MiapeGEDocument> xmlFile, ControlVocabularyManager cvManager,
			PersistenceManager db, String userName, String password)
			throws MiapeDatabaseException, MiapeSecurityException, IllegalMiapeArgumentException {
		if (cvManager == null)
			throw new IllegalMiapeArgumentException("ControlVocabularyManager is not set");
		return getFactory().create(xmlFile, db, cvManager, userName, password);
	}

	private MiapeGEDocument create(MiapeXmlFile<MiapeGEDocument> xmlFile, PersistenceManager databaseManager,
			ControlVocabularyManager cvManager, String userName, String password) {
		MiapeGEDocument result = null;
		try {
			final File file = ZipManager.decompressFileIfNeccessary(xmlFile.toFile(), false);
			final GEMIAPEGE miapeGE = (GEMIAPEGE) jc.createUnmarshaller().unmarshal(file);
			if (databaseManager == null) {
				result = new MiapeGEDocumentImpl(miapeGE, null, cvManager, userName, password);
			} else {
				result = new MiapeGEDocumentImpl(miapeGE, cvManager, databaseManager, userName, password);
			}
		} catch (final JAXBException e) {
			e.printStackTrace();
		} catch (final Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	private MiapeXmlFile<MiapeGEDocument> create(MiapeGEDocument document,
			ControlVocabularyManager controlVocabularyUtil) {
		File xmlFile = null;
		try {
			xmlFile = File.createTempFile("geXML", ".temp");
			final GEMIAPEGE miapeGE = new MiapeGeXMLAdapter(document, controlVocabularyUtil).adapt();
			final Marshaller marshaller = jc.createMarshaller();
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, new Boolean(true));
			try {
				marshaller.setProperty("com.sun.xml.bind.indentString", "\t");
			} catch (final Exception e) {
				marshaller.setProperty("com.sun.xml.internal.bind.indentString", "\t");
			}
			marshaller.marshal(miapeGE, xmlFile);

		} catch (final JAXBException e) {
			e.printStackTrace();
		} catch (final IOException e) {
			e.printStackTrace();
		}
		if (xmlFile != null) {
			final MIAPEGEXmlFile miapegeXmlFile = new MIAPEGEXmlFile(xmlFile);
			miapegeXmlFile.setCvUtil(controlVocabularyUtil);
			return miapegeXmlFile;
		}
		return null;
	}

	@Override
	public MiapeXmlFile<MiapeGEDocument> toXml(MiapeGEDocument document, ControlVocabularyManager cvManager) {
		if (cvManager == null)
			throw new IllegalMiapeArgumentException("ControlVocabularyManager is not set");
		return getFactory().create(document, cvManager);
	}

}
