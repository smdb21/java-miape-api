package org.proteored.miapeapi.xml.ge.adapter;

import java.util.List;
import java.util.Set;

import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.Buffer;
import org.proteored.miapeapi.interfaces.ge.ElectrophoresisProtocol;
import org.proteored.miapeapi.xml.ge.autogenerated.GEElectrophoresisProtocol;
import org.proteored.miapeapi.xml.ge.autogenerated.MIAPEBufferType;
import org.proteored.miapeapi.xml.ge.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.ge.util.GEControlVocabularyXmlFactory;
import org.proteored.miapeapi.xml.util.MiapeXmlUtil;

public class EProtocolAdapter implements Adapter<GEElectrophoresisProtocol> {

	private final ObjectFactory factory;
	private final GEControlVocabularyXmlFactory cvFactory;
	private final ElectrophoresisProtocol eProtocol;

	public EProtocolAdapter(ElectrophoresisProtocol eprotocol2,
			ObjectFactory factory2, GEControlVocabularyXmlFactory cvFactory2) {
		this.cvFactory = cvFactory2;
		this.eProtocol = eprotocol2;
		this.factory = factory2;
	}

	@Override
	public GEElectrophoresisProtocol adapt() {
		GEElectrophoresisProtocol eProtocolXML = factory.createGEElectrophoresisProtocol();
		eProtocolXML.setElectrophoresisConditions(eProtocol.getElectrophoresisConditions());
		eProtocolXML.setId(MiapeXmlUtil.IdentifierPrefixes.EPROTOCOL.getPrefix() + eProtocol.getId());
		eProtocolXML.setName(eProtocol.getName());

		if (eProtocol.getRunningBuffers() != null)
			addBuffer(eProtocolXML.getGERunningBuffer(), eProtocol.getRunningBuffers());

		if (eProtocol.getAdditionalBuffers() != null)
			addBuffer(eProtocolXML.getGEEProtocolAdditionalBuffer(), eProtocol.getAdditionalBuffers());

		return eProtocolXML;
	}

	private void addBuffer(List<MIAPEBufferType> geBuffer,
			Set<Buffer> buffers) {
		for (Buffer runningBuffer : buffers)
			geBuffer.add(new BufferAdapter(runningBuffer, factory, cvFactory).adapt());

	}

}
