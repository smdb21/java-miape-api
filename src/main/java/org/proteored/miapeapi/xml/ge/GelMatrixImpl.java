package org.proteored.miapeapi.xml.ge;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.proteored.miapeapi.interfaces.Buffer;
import org.proteored.miapeapi.interfaces.ge.Agent;
import org.proteored.miapeapi.interfaces.ge.GelMatrix;
import org.proteored.miapeapi.interfaces.ge.SampleApplication;
import org.proteored.miapeapi.xml.ge.autogenerated.GEGelMatrix;
import org.proteored.miapeapi.xml.ge.autogenerated.GESample;
import org.proteored.miapeapi.xml.ge.autogenerated.GESampleApplication;
import org.proteored.miapeapi.xml.ge.autogenerated.MIAPEBufferType;
import org.proteored.miapeapi.xml.ge.autogenerated.MIAPESubstanceType;
import org.proteored.miapeapi.xml.ge.util.GEControlVocabularyXmlFactory;
import org.proteored.miapeapi.xml.util.MiapeXmlUtil;

public class GelMatrixImpl implements GelMatrix {
	private final GEGelMatrix gelMatrixXML;
	private final Map<String, GESample> sampleMap;

	public GelMatrixImpl(GEGelMatrix gelMatrix, Map<String, GESample> sampleMap) {
		this.gelMatrixXML = gelMatrix;
		this.sampleMap = sampleMap;
	}

	@Override
	public String getAcry() {
		return gelMatrixXML.getAcrylamide();
	}

	@Override
	public String getAcrylamideConcentration() {
		return gelMatrixXML.getAcrylamideConcentration();
	}


	@Override
	public Set<Buffer> getAdditionalMatrixBuffers() {
		Set<Buffer> setOfBuffer = new HashSet<Buffer>();
		List<MIAPEBufferType> bufferList = gelMatrixXML.getGEAdditionalMatrixBuffer();
		for (MIAPEBufferType miapeBufferItem : bufferList) {
			setOfBuffer.add(new BufferImpl(miapeBufferItem));
		}
		return setOfBuffer;
	}

	@Override
	public Set<Agent> getAdditionalMatrixSubstances() {
		Set<Agent> setOfSubstances = new HashSet<Agent>();
		List<MIAPESubstanceType> SubstanceList = gelMatrixXML.getGEAdditionalMatrixSubstance();
		for (MIAPESubstanceType miapeSubstanceItem : SubstanceList) {
			setOfSubstances.add(new AgentImpl(miapeSubstanceItem));
		}
		return setOfSubstances;
	}

	@Override
	public String getBisacry() {
		return gelMatrixXML.getCrosslinker();
	}

	@Override
	public String getComposed() {
		return gelMatrixXML.getComposed();
	}

	@Override
	public String getDimensionsUnit() {
		return GEControlVocabularyXmlFactory.getUnitName(gelMatrixXML.getDimensionsX());
	}

	@Override
	public Double getDimensionsX() {
		return Double.valueOf(GEControlVocabularyXmlFactory.getValue(gelMatrixXML.getDimensionsX()));
	}

	@Override
	public Double getDimensionsY() {
		return Double.valueOf(GEControlVocabularyXmlFactory.getValue(gelMatrixXML.getDimensionsY()));
	}

	@Override
	public Double getDimensionsZ() {
		return Double.valueOf(GEControlVocabularyXmlFactory.getValue(gelMatrixXML.getDimensionsZ()));
	}

	@Override
	public String getGelManufacture() {
		return gelMatrixXML.getGelManufacture();
	}

	@Override
	public String getMwRangeH() {
		return GEControlVocabularyXmlFactory.getValue(gelMatrixXML.getMWRangeH());

	}

	@Override
	public String getMwRangeL() {
		return GEControlVocabularyXmlFactory.getValue(gelMatrixXML.getMWRangeL());
	}

	@Override
	public String getMwRangeType() {
		return GEControlVocabularyXmlFactory.getName(gelMatrixXML.getMWRangeType());
	}

	@Override
	public String getMwRangeUnit() {
		return GEControlVocabularyXmlFactory.getUnitName(gelMatrixXML.getMWRangeH());
	}

	@Override
	public String getName() {
		return GEControlVocabularyXmlFactory.getName(gelMatrixXML.getName());
	}

	@Override
	public String getPhRangeH() {
		return gelMatrixXML.getPHRangeH();
	}

	@Override
	public String getPhRangeL() {
		return gelMatrixXML.getPHRangeL();
	}

	@Override
	public String getPhRangeType() {
		return GEControlVocabularyXmlFactory.getName(gelMatrixXML.getPHRangeType());
	}

	@Override
	public Set<Buffer> getPolymerizationMatrixBuffers() {
		Set<Buffer> setOfBuffers = new HashSet<Buffer>();
		List<MIAPEBufferType> bufferList = gelMatrixXML.getGEPolymerizationMatrixBuffer();
		for (MIAPEBufferType bufferItem : bufferList) {
			setOfBuffers.add(new BufferImpl(bufferItem));
		}
		return setOfBuffers;
	}

	@Override
	public Set<SampleApplication> getSampleApplications() {
		Set<SampleApplication> setOfSampleApplication = new HashSet<SampleApplication>();
		List<GESampleApplication> sampleApplicationList = gelMatrixXML.getGESampleApplication();
		for (GESampleApplication geSampleApplication : sampleApplicationList) {
			setOfSampleApplication.add(new SampleApplicationImpl(geSampleApplication, sampleMap));
		}
		return setOfSampleApplication;
	}

	@Override
	public String getType() {
		return gelMatrixXML.getType();
	}

	@Override
	public int getId() {
		return MiapeXmlUtil.getIdFromXMLId(gelMatrixXML.getId());
	}

}
