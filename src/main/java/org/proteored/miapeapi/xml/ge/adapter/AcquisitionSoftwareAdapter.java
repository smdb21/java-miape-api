package org.proteored.miapeapi.xml.ge.adapter;

import org.proteored.miapeapi.cv.ge.ImageAcquisitionSoftwareName;
import org.proteored.miapeapi.cv.msi.DataTransformation;
import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.Software;
import org.proteored.miapeapi.xml.ge.autogenerated.MIAPEGESoftwareType;
import org.proteored.miapeapi.xml.ge.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.ge.util.GEControlVocabularyXmlFactory;
import org.proteored.miapeapi.xml.util.MiapeXmlUtil;

public class AcquisitionSoftwareAdapter implements Adapter<MIAPEGESoftwareType> {
	protected final Software software;
	private final ObjectFactory factory;
	protected final GEControlVocabularyXmlFactory cvFactory;

	public AcquisitionSoftwareAdapter(Software software, ObjectFactory factory,
			GEControlVocabularyXmlFactory cvFactory) {
		this.software = software;
		this.factory = factory;
		this.cvFactory = cvFactory;
	}

	@Override
	public MIAPEGESoftwareType adapt() {
		MIAPEGESoftwareType softwareTypeXML = factory.createMIAPEGESoftwareType();
		softwareTypeXML.setCatalogNumber(software.getCatalogNumber());
		softwareTypeXML.setComments(software.getComments());
		softwareTypeXML.setCustomizations(software.getCustomizations());
		softwareTypeXML.setDescription(cvFactory.createCV(software.getDescription(), null,
				DataTransformation.getInstance(cvFactory.getCvManager())));
		softwareTypeXML.setManufacturer(software.getManufacturer());
		softwareTypeXML.setModel(software.getModel());
		softwareTypeXML.setVersion(software.getVersion());
		softwareTypeXML.setParameters(software.getParameters());
		softwareTypeXML.setURI(software.getURI());
		softwareTypeXML.setName(cvFactory.createCV(software.getName(), null,
				ImageAcquisitionSoftwareName.getInstance(cvFactory.getCvManager())));
		softwareTypeXML.setId(MiapeXmlUtil.IdentifierPrefixes.SOFTWARE.getPrefix()
				+ software.getId());
		return softwareTypeXML;
	}

}
