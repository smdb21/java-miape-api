package org.proteored.miapeapi.xml.ge.adapter;

import java.util.List;
import java.util.Set;

import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.ge.Dimension;
import org.proteored.miapeapi.interfaces.ge.InterdimensionProcess;
import org.proteored.miapeapi.interfaces.ge.Protocol;
import org.proteored.miapeapi.xml.ge.autogenerated.GEDimensionType;
import org.proteored.miapeapi.xml.ge.autogenerated.GEInterDimensionProcess;
import org.proteored.miapeapi.xml.ge.autogenerated.GEProtocol;
import org.proteored.miapeapi.xml.ge.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.ge.util.GEControlVocabularyXmlFactory;

public class ProtocolAdapter implements Adapter<GEProtocol> {
	private final Protocol protocol;
	private final ObjectFactory factory;
	private final GEControlVocabularyXmlFactory cvFactory;

	public ProtocolAdapter(Protocol protocol, ObjectFactory factory, GEControlVocabularyXmlFactory cvFactory){
		this.factory = factory;
		this.protocol = protocol;
		this.cvFactory = cvFactory;
	}

	@Override
	public GEProtocol adapt() {
		GEProtocol protocolXML = factory.createGEProtocol();
		protocolXML.setDescription(protocol.getDescription());
		protocolXML.setName(protocol.getName());

		if (protocol.getDimensions() != null)
			addGeFirstDimension(protocolXML.getGEFirstDimension(), protocol.getDimensions());
		if (protocol.getInterdimensionProcesses() != null)
			addInterDimensionProcesses(protocolXML.getGEInterDimensionProcess(), protocol.getInterdimensionProcesses());

		return protocolXML;
	}

	private void addInterDimensionProcesses(
			List<GEInterDimensionProcess> geInterDimensionProcess,
			Set<InterdimensionProcess> interdimensionProcesses) {
		for (InterdimensionProcess interdimensionProcess : interdimensionProcesses)
			geInterDimensionProcess.add(new InterdimensionProcessAdapter(interdimensionProcess, factory, cvFactory).adapt());

	}

	private void addGeFirstDimension(List<GEDimensionType> geFirstDimension,
			Set<Dimension> dimensions) {
		for (Dimension dimension : dimensions) {
			geFirstDimension.add(new DimensionAdapter(dimension, this.factory, this.cvFactory).adapt());
		}
	}

}
