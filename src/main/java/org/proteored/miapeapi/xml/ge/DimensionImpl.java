package org.proteored.miapeapi.xml.ge;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.proteored.miapeapi.interfaces.Buffer;
import org.proteored.miapeapi.interfaces.ge.Dimension;
import org.proteored.miapeapi.interfaces.ge.ElectrophoresisProtocol;
import org.proteored.miapeapi.interfaces.ge.GelMatrix;
import org.proteored.miapeapi.xml.ge.autogenerated.GEDimensionType;
import org.proteored.miapeapi.xml.ge.autogenerated.GEElectrophoresisProtocol;
import org.proteored.miapeapi.xml.ge.autogenerated.GEGelMatrix;
import org.proteored.miapeapi.xml.ge.autogenerated.GESample;
import org.proteored.miapeapi.xml.ge.autogenerated.MIAPEBufferType;

public class DimensionImpl implements Dimension {
	private final GEDimensionType dimensionXML;
	private final Map<String, GESample> sampleMap;

	public DimensionImpl(GEDimensionType geDimensionItem, Map<String, GESample> sampleMap) {
		this.dimensionXML = geDimensionItem;
		this.sampleMap = sampleMap;
	}


	@Override
	public String getDimension() {
		return dimensionXML.getDimension();
	}

	@Override
	public Set<ElectrophoresisProtocol> getElectrophoresisProtocols() {
		Set<ElectrophoresisProtocol> setOfEProtocols = new HashSet<ElectrophoresisProtocol>();
		List<GEElectrophoresisProtocol> eProtocolList = dimensionXML.getGEElectrophoresisProtocol();
		for (GEElectrophoresisProtocol geElectrophoresisProtocol : eProtocolList) {
			setOfEProtocols.add(new ElectrophoresisProtocolImpl(geElectrophoresisProtocol));
		}
		return setOfEProtocols;
	}

	@Override
	public Set<Buffer> getLoadingBuffers() {
		Set<Buffer> setOfBuffers = new HashSet<Buffer>();
		List<MIAPEBufferType> bufferList = dimensionXML.getGELoadingBuffer();
		for (MIAPEBufferType miapeBufferItem : bufferList) {
			setOfBuffers.add(new BufferImpl(miapeBufferItem));
		}
		return setOfBuffers;
	}

	@Override
	public Set<GelMatrix> getMatrixes() {
		Set<GelMatrix> setOfGelMatrix = new HashSet<GelMatrix>();
		List<GEGelMatrix> gelMatrixList = dimensionXML.getGEGelMatrix();
		for (GEGelMatrix geGelMatrix : gelMatrixList) {
			setOfGelMatrix.add(new GelMatrixImpl(geGelMatrix, this.sampleMap ));
		}
		return setOfGelMatrix;
	}

	@Override
	public String getName() {
		return dimensionXML.getName();
	}

	@Override
	public String getSeparationMethod() {
		return dimensionXML.getSeparationMethod();
	}

}
