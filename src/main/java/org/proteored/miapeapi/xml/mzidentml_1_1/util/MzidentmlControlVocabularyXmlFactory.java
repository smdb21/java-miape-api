package org.proteored.miapeapi.xml.mzidentml_1_1.util;

import java.util.List;

import org.proteored.miapeapi.cv.Accession;
import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.cv.ControlVocabularySet;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.FuGECommonOntologyCvParamType;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.FuGECommonOntologyParamType;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.FuGECommonOntologyPropertyValue;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.FuGECommonOntologyUserParamType;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.ParamListType;
import org.proteored.miapeapi.xml.mzidentml.autogenerated.ParamType;
import org.proteored.miapeapi.xml.util.MiapeXmlUtil;

import uk.ac.ebi.jmzidml.model.mzidml.AbstractParam;
import uk.ac.ebi.jmzidml.model.mzidml.CvParam;
import uk.ac.ebi.jmzidml.model.mzidml.Param;
import uk.ac.ebi.jmzidml.model.mzidml.ParamList;
import uk.ac.ebi.jmzidml.model.mzidml.UserParam;

public class MzidentmlControlVocabularyXmlFactory {

	// This comes from mzIdentML exported from MASCOT and it has the information
	// of the scoring model
	public static final String MASCOT_INSTRUMENT_NAME = "Mascot Instrument Name";

	private final ObjectFactory factory;
	private final ControlVocabularyManager controlVocabularyUtil;

	public MzidentmlControlVocabularyXmlFactory(ObjectFactory factory,
			ControlVocabularyManager controlVocabularyUtil) {
		this.factory = factory;
		this.controlVocabularyUtil = controlVocabularyUtil;
	}

	public ControlVocabularyManager getCvManager() {
		return this.controlVocabularyUtil;
	}

	/**
	 * Create a ParamType with either: - a FuGECommonOntologyCvParamType or - a
	 * FuGECommonOntologyUserParamType
	 * 
	 * @param name
	 * @param cvSets
	 * @return a ParamType
	 */
	public ParamType createCV(String name, String value, ControlVocabularySet... cvSets) {
		if (name == null)
			return null;
		if (cvSets == null)
			return createUserParam(name, value);
		ParamType param;
		if (cvSets.length == 0)
			return createUserParam(name, value);
		for (ControlVocabularySet section : cvSets) {
			if (controlVocabularyUtil.isCV(name, section)) {

				param = factory.createParamType();
				FuGECommonOntologyCvParamType ontologyCvParamType = factory
						.createFuGECommonOntologyCvParamType();
				Accession cvId = controlVocabularyUtil.getControlVocabularyId(name, section);
				String cvRef = controlVocabularyUtil.getCVRef(cvId, section);

				if (value != null)
					ontologyCvParamType.setValue(value);
				ontologyCvParamType.setAccession(cvId.toString());
				ontologyCvParamType.setName(name);
				ontologyCvParamType.setCvRef(cvRef);
				param.setCvParam(ontologyCvParamType);

				return param;
			}
		}
		return createUserParam(name, value);

	}

	/**
	 * Create a {@link ParamType} with a {@link FuGECommonOntologyUserParamType}
	 * 
	 * @param name
	 * @return the {@link ParamType}
	 */
	public ParamType createUserParam(String name, String value) {
		ParamType param = factory.createParamType();
		FuGECommonOntologyUserParamType ontologyUserParamType = factory
				.createFuGECommonOntologyUserParamType();
		if (value != null)
			ontologyUserParamType.setValue(value);
		ontologyUserParamType.setName(name);
		param.setUserParam(ontologyUserParamType);

		return param;
	}

	/**
	 * Create a {@link FuGECommonOntologyParamType} that can be either: - a
	 * FuGECommonOntologyCvParamType or - a createOntologyCvParamType
	 * 
	 * @param name
	 * @param cvSets
	 * @return FuGECommonOntologyParamType
	 */
	public FuGECommonOntologyParamType createOntologyParamType(String name, String value,
			ControlVocabularySet... cvSets) {
		if (name == null)
			return null;
		if (cvSets == null)
			return createOntologyUserParam(name, value);

		if (cvSets.length == 0)
			throw new IllegalArgumentException();
		for (ControlVocabularySet cvSet : cvSets) {
			if (controlVocabularyUtil.isCV(name, cvSet)) {

				FuGECommonOntologyCvParamType ontologyCvParamType = factory
						.createFuGECommonOntologyCvParamType();
				Accession cvId = controlVocabularyUtil.getControlVocabularyId(name, cvSet);
				String cvRef = controlVocabularyUtil.getCVRef(cvId, cvSet);

				ontologyCvParamType.setAccession(cvId.toString());
				ontologyCvParamType.setName(name);
				ontologyCvParamType.setCvRef(cvRef);
				if (value != null)
					ontologyCvParamType.setValue(value);

				return ontologyCvParamType;
			}
		}
		return createOntologyUserParam(name, value);

	}

	/**
	 * Create a {@link FuGECommonOntologyCvParamType} IF the term is not a CV,
	 * the function will
	 * return null.
	 * 
	 * @param name
	 * @param value
	 * @param cvSets
	 * @return the FuGECommonOntologyCvParamType
	 */
	public FuGECommonOntologyCvParamType createOntologyCvParamType(String name, String value,
			ControlVocabularySet... cvSets) {
		if (name == null)
			return null;
		if (cvSets == null)
			return null;

		if (cvSets.length == 0)
			throw new IllegalArgumentException();
		for (ControlVocabularySet section : cvSets) {
			if (controlVocabularyUtil.isCV(name, section)) {

				FuGECommonOntologyCvParamType ontologyCvParamType = factory
						.createFuGECommonOntologyCvParamType();
				Accession cvId = controlVocabularyUtil.getControlVocabularyId(name, section);
				String cvRef = controlVocabularyUtil.getCVRef(cvId, section);

				ontologyCvParamType.setAccession(cvId.toString());
				ontologyCvParamType.setName(name);
				ontologyCvParamType.setCvRef(cvRef);
				if (value != null)
					ontologyCvParamType.setValue(value);

				return ontologyCvParamType;
			}
		}
		return null;

	}

	/**
	 * Create a {@link FuGECommonOntologyUserParamType}
	 * 
	 * @param name
	 * @param value
	 * @return a FuGECommonOntologyUserParamType
	 */
	public FuGECommonOntologyUserParamType createOntologyUserParam(String name, String value) {
		FuGECommonOntologyUserParamType ontologyUserParamType = factory
				.createFuGECommonOntologyUserParamType();
		if (value != null)
			ontologyUserParamType.setValue(value);
		ontologyUserParamType.setName(name);

		return ontologyUserParamType;
	}

	/**
	 * Create a {@link FuGECommonOntologyPropertyValue}
	 * 
	 * @param value
	 * @param unit
	 * @param cvSets
	 * @return the FuGECommonOntologyPropertyValue
	 */
	public FuGECommonOntologyPropertyValue createProperty(String value, String unit,
			ControlVocabularySet... cvSets) {

		FuGECommonOntologyPropertyValue propertyValue = factory
				.createFuGECommonOntologyPropertyValue();
		propertyValue.setValue(value);
		if (unit == null || cvSets.length == 0)
			return propertyValue;

		ControlVocabularySet cvSet = cvSets[0];
		if (controlVocabularyUtil.isCV(unit, cvSet)) {
			Accession cvId = controlVocabularyUtil.getControlVocabularyId(unit, cvSet);
			propertyValue.setUnitAccession(cvId.toString());
			propertyValue.setUnitCvRef(controlVocabularyUtil.getCVRef(cvId, cvSet));
		}
		propertyValue.setUnitName(unit);

		return propertyValue;
	}

	/**
	 * gets a string like "name=value unitName" from a
	 * {@link FuGECommonOntologyParamType}
	 * 
	 * @param parameter
	 * @return a string
	 */
	public static String readEntireParam(AbstractParam parameter) {

		StringBuilder sb = new StringBuilder();
		if (parameter == null)
			return null;
		String value = parameter.getValue();
		String name = parameter.getName();
		if (value == null || value.equals("")) {
			sb.append(name);
		} else {
			sb.append(name);
			sb.append("=");
			sb.append(value);
		}
		String unitName = parameter.getUnitName();
		if (unitName != null && !unitName.equals("")) {
			sb.append(" " + unitName);
		}
		return sb.toString();
	}

	/**
	 * gets a string like "name=value unitName" from a {@link ParamType}
	 * 
	 * @param paramType
	 * @return a string
	 */
	public static String readEntireParam(Param paramType) {
		if (paramType == null)
			return null;
		StringBuilder sb = new StringBuilder();
		CvParam cvParam = paramType.getCvParam();
		if (cvParam != null) {
			sb.append(readEntireParam(cvParam));
		}

		UserParam userParam = paramType.getUserParam();
		if (userParam != null) {
			if (cvParam != null) {
				sb.append(MiapeXmlUtil.TERM_SEPARATOR);
			}
			sb.append(readEntireParam(userParam));
		}

		return sb.toString();
	}

	/**
	 * gets a string like
	 * "name=value unitName TERM_SEPARATOR name=value unitName" from a
	 * {@link ParamListType}
	 * 
	 * @param paramList
	 * @return a string
	 */
	public static String readEntireParamList(ParamList paramList) {
		if (paramList == null)
			return null;
		StringBuilder sb = new StringBuilder();
		List<AbstractParam> parameters = paramList.getParamGroup();
		int counter = 1;
		for (AbstractParam parameter : parameters) {
			sb.append(readEntireParam(parameter));
			if (counter < parameters.size())
				sb.append(MiapeXmlUtil.TERM_SEPARATOR);
			counter++;
		}
		return sb.toString();
	}

	/**
	 * gets a string like
	 * "name=value unitName TERM_SEPARATOR name=value unitName" from a List<
	 * {@link FuGECommonOntologyParamType}>
	 * 
	 * @param paramList
	 * @return a string
	 */
	public static String readEntireParamList(List<AbstractParam> paramList) {
		if (paramList == null)
			return null;
		StringBuilder sb = new StringBuilder();
		int counter = 1;
		for (AbstractParam parameter : paramList) {
			sb.append(readEntireParam(parameter));
			if (counter < paramList.size())
				sb.append(MiapeXmlUtil.TERM_SEPARATOR);
			counter++;
		}
		return sb.toString();
	}

	/**
	 * gets a string like
	 * "name=value unitName TERM_SEPARATOR name=value unitName" from a List<
	 * {@link FuGECommonOntologyCvParamType}>
	 * 
	 * @param paramList
	 * @param withUnit
	 *            state if unitName is appended to the pairs name-value
	 * @return a string
	 */
	public static String readEntireCVParamList(List<CvParam> paramList, boolean withUnit) {
		if (paramList == null)
			return null;
		StringBuilder sb = new StringBuilder();
		int counter = 1;
		for (CvParam param : paramList) {
			String value = param.getValue();
			String name = param.getName();
			if (value == null || value.equals("")) {
				sb.append(name);
			} else {
				sb.append(name);
				sb.append("=");
				sb.append(value);
			}
			String unitName = param.getUnitName();
			if (withUnit && unitName != null && !unitName.equals("")) {
				sb.append(" " + unitName);
			}
			if (counter < paramList.size())
				sb.append(MiapeXmlUtil.TERM_SEPARATOR);
			counter++;
		}

		return sb.toString();
	}

	/**
	 * gets the first unit name of a list of
	 * {@link FuGECommonOntologyCvParamType}
	 * 
	 * @param cvParams
	 * @return the unit name
	 */
	public static String readFirstUnitCVParamList(List<CvParam> cvParams) {
		if (cvParams == null)
			return null;
		for (CvParam param : cvParams) {
			String unitName = param.getUnitName();
			if (unitName != null && !unitName.equals("")) {
				return unitName;
			}
		}
		return "";
	}

	/**
	 * gets the name value of a {@link ParamType}
	 * 
	 * @param paramType
	 * @return the name
	 */
	public static String readNameParam(ParamType paramType) {
		String ret;
		ret = "";
		if (paramType == null)
			return null;
		FuGECommonOntologyCvParamType cvParam = paramType.getCvParam();
		if (cvParam != null) {
			FuGECommonOntologyCvParamType fugeCVParam = cvParam;
			ret = fugeCVParam.getName();
		} else {
			FuGECommonOntologyUserParamType userParam = paramType.getUserParam();
			if (userParam != null) {
				FuGECommonOntologyUserParamType fugeUserParam = userParam;
				ret = fugeUserParam.getName();
			}
		}
		return ret;
	}

	public boolean isCV(String name, ControlVocabularySet cvSet) {
		return this.controlVocabularyUtil.isCV(name, cvSet);
	}

	public boolean isCV(Accession accession, ControlVocabularySet cvSet) {
		if (this.controlVocabularyUtil.getControlVocabularyName(accession, cvSet) != null)
			return true;
		return false;
	}

}
