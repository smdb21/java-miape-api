package org.proteored.miapeapi.xml.ms;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.proteored.miapeapi.interfaces.Equipment;
import org.proteored.miapeapi.interfaces.ms.Esi;
import org.proteored.miapeapi.xml.ms.autogenerated.MIAPEEquipmentType;
import org.proteored.miapeapi.xml.ms.autogenerated.MSESI;
import org.proteored.miapeapi.xml.ms.util.MsControlVocabularyXmlFactory;

public class EsiImpl implements Esi {
	private final MSESI msEsi;

	public EsiImpl(MSESI msEsi) {
		this.msEsi = msEsi;
	}

	@Override
	public Set<Equipment> getInterfaces() {
		Set<Equipment> setOfEquipment = new HashSet<Equipment>();

		List<MIAPEEquipmentType> equipmentList = this.msEsi.getMSInterface();
		for (MIAPEEquipmentType equipmentItem : equipmentList) {
			setOfEquipment.add(new MiapeEquipmentImpl(equipmentItem));
		}
		return setOfEquipment;
	}

	@Override
	public String getName() {
		if (this.msEsi == null)
			return null;
		return MsControlVocabularyXmlFactory.getName(msEsi.getName());
	}

	@Override
	public String getParameters() {
		return this.msEsi.getOparameters();
	}

	@Override
	public Set<Equipment> getSprayers() {
		Set<Equipment> setOfEquipment = new HashSet<Equipment>();

		List<MIAPEEquipmentType> EquipmentList = this.msEsi.getMSSprayer();
		for (MIAPEEquipmentType EquipmentItem : EquipmentList) {
			setOfEquipment.add(new MiapeEquipmentImpl(EquipmentItem));
		}
		return setOfEquipment;
	}

	@Override
	public String getSupplyType() {
		if (this.msEsi == null)
			return null;
		return MsControlVocabularyXmlFactory.getName(msEsi.getSupplyType());
	}

}
