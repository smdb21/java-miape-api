package org.proteored.miapeapi.xml.pride.msi;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.interfaces.msi.IdentifiedProtein;
import org.proteored.miapeapi.interfaces.msi.IdentifiedProteinSet;
import org.proteored.miapeapi.interfaces.msi.InputDataSet;
import org.proteored.miapeapi.interfaces.msi.InputParameter;
import org.proteored.miapeapi.xml.pride.autogenerated.ExperimentType;
import org.proteored.miapeapi.xml.pride.autogenerated.GelFreeIdentificationType;
import org.proteored.miapeapi.xml.pride.autogenerated.TwoDimensionalIdentificationType;
import org.proteored.miapeapi.xml.util.MiapeXmlUtil;

import gnu.trove.map.hash.THashMap;

public class ProteinSetImpl implements IdentifiedProteinSet {
	private final List<GelFreeIdentificationType> gelFreeIdentificationList;
	private final List<TwoDimensionalIdentificationType> twoDimensionalIdentificationList;
	private final InputParameterImpl inputParameter;
	private final Set<InputDataSet> inputDataSets;
	private final ControlVocabularyManager cvManager;
	private THashMap<String, IdentifiedProtein> identifiedProteins;

	public ProteinSetImpl(ExperimentType experiment, Set<InputDataSet> inputDataSets, InputParameterImpl inputParameter,
			ControlVocabularyManager cvManager) {
		this.gelFreeIdentificationList = experiment.getGelFreeIdentification();
		this.twoDimensionalIdentificationList = experiment.getTwoDimensionalIdentification();
		this.inputDataSets = inputDataSets;
		this.inputParameter = inputParameter;
		this.cvManager = cvManager;
	}

	@Override
	public String getFileLocation() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<String, IdentifiedProtein> getIdentifiedProteins() {
		if (identifiedProteins == null || identifiedProteins.isEmpty()) {
			identifiedProteins = new THashMap<String, IdentifiedProtein>();
			if (gelFreeIdentificationList != null) {
				for (GelFreeIdentificationType gelFreeIdentifitation : gelFreeIdentificationList) {
					int proteinID = MiapeXmlUtil.ProteinCounter.increaseCounter();
					final IdentifedProteinImpl proteinImpl = new IdentifedProteinImpl(gelFreeIdentifitation,
							inputDataSets, proteinID, cvManager);
					identifiedProteins.put(proteinImpl.getAccession(), proteinImpl);
				}
			}
			if (twoDimensionalIdentificationList != null) {
				for (TwoDimensionalIdentificationType twoDimensionalIdentifitation : twoDimensionalIdentificationList) {
					int proteinID = MiapeXmlUtil.ProteinCounter.increaseCounter();
					final IdentifedProteinImpl proteinImpl = new IdentifedProteinImpl(twoDimensionalIdentifitation,
							inputDataSets, proteinID, cvManager);
					identifiedProteins.put(proteinImpl.getAccession(), proteinImpl);
				}
			}
		}
		if (!identifiedProteins.isEmpty())
			return identifiedProteins;
		return null;
	}

	@Override
	public Set<InputDataSet> getInputDataSets() {
		return inputDataSets;
	}

	@Override
	public InputParameter getInputParameter() {
		return this.inputParameter;
	}

	@Override
	public String getName() {
		if (this.gelFreeIdentificationList != null)
			return "Gel free identification protein set";
		if (this.gelFreeIdentificationList != null)
			return "Two dimensional identification protein set";
		return "Identification protein set";
	}

}
