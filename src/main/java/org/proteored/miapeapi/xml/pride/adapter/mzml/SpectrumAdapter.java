package org.proteored.miapeapi.xml.pride.adapter.mzml;

import java.nio.ByteOrder;

import org.apache.log4j.Logger;
import org.proteored.miapeapi.cv.Accession;
import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.xml.mzml.util.MzMLControlVocabularyXmlFactory;
import org.proteored.miapeapi.xml.pride.autogenerated.ExperimentType.MzData.SpectrumList.Spectrum;
import org.proteored.miapeapi.xml.pride.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.pride.autogenerated.PeakListBinaryType;
import org.proteored.miapeapi.xml.pride.autogenerated.PeakListBinaryType.Data;
import org.proteored.miapeapi.xml.pride.autogenerated.PrecursorType;
import org.proteored.miapeapi.xml.pride.autogenerated.SpectrumDescType;
import org.proteored.miapeapi.xml.pride.autogenerated.SpectrumDescType.PrecursorList;
import org.proteored.miapeapi.xml.pride.autogenerated.SpectrumSettingsType;
import org.proteored.miapeapi.xml.pride.autogenerated.SpectrumSettingsType.SpectrumInstrument;
import org.proteored.miapeapi.xml.pride.util.PrideControlVocabularyXmlFactory;

import uk.ac.ebi.jmzml.model.mzml.BinaryDataArray;
import uk.ac.ebi.jmzml.model.mzml.BinaryDataArray.Precision;
import uk.ac.ebi.jmzml.model.mzml.BinaryDataArrayList;
import uk.ac.ebi.jmzml.model.mzml.CVParam;
import uk.ac.ebi.jmzml.model.mzml.ParamGroup;
import uk.ac.ebi.jmzml.model.mzml.Precursor;
import uk.ac.ebi.jmzml.model.mzml.ReferenceableParamGroupList;
import uk.ac.ebi.jmzml.xml.io.MzMLUnmarshaller;
import uk.ac.ebi.jmzml.xml.io.MzMLUnmarshallerException;

public class SpectrumAdapter implements Adapter<Spectrum> {
	private static Logger log = Logger.getLogger("log4j.logger.org.proteored");

	private static final Accession MS_LEVEL_ACC = new Accession("MS:1000511");
	private static final Accession LOWEST_OBSERVED_MZ_ACC = new Accession("MS:1000528");
	private static final Accession HIGHEST_OBSERVED_MZ_ACC = new Accession("MS:1000527");
	private static final Accession INTENSITY_ACC = new Accession("MS:1000515");
	private static final Accession MZ_ACC = new Accession("MS:1000514");

	private final uk.ac.ebi.jmzml.model.mzml.Spectrum mzMLspectrum;
	private final ReferenceableParamGroupList referenceableParamGroupList;
	private final ObjectFactory factory;
	private final PrideControlVocabularyXmlFactory prideCvUtil;
	private final MzMLUnmarshaller mzMLUnmarshaller;
	private final int offset;

	private final Integer newIndex;

	/**
	 * 
	 * @param mzMLUnmarshaller
	 * @param mzMLspectrum
	 * @param referenceableParamGroupList
	 * @param factory
	 * @param prideCvUtil
	 * @param offset
	 * @param newIndex
	 *            if provided, it will override the index of the spectrum to
	 *            that value
	 */
	public SpectrumAdapter(MzMLUnmarshaller mzMLUnmarshaller,
			uk.ac.ebi.jmzml.model.mzml.Spectrum mzMLspectrum,
			ReferenceableParamGroupList referenceableParamGroupList, ObjectFactory factory,
			PrideControlVocabularyXmlFactory prideCvUtil, int offset, Integer newIndex) {
		this.factory = factory;
		this.mzMLspectrum = mzMLspectrum;
		this.referenceableParamGroupList = referenceableParamGroupList;
		this.prideCvUtil = prideCvUtil;
		this.offset = offset;
		this.mzMLUnmarshaller = mzMLUnmarshaller;
		this.newIndex = newIndex;
	}

	@Override
	public Spectrum adapt() {
		Spectrum prideXmlSpectrum = factory.createExperimentTypeMzDataSpectrumListSpectrum();

		ParamGroup mzMLSpectrumParamGroup = MzMLControlVocabularyXmlFactory.createParamGroup(
				mzMLspectrum.getCvParam(), mzMLspectrum.getUserParam(),
				mzMLspectrum.getReferenceableParamGroupRef());

		factory.createExperimentTypeMzDataSpectrumListSpectrum();

		int spectrumRefInteger;
		if (newIndex == null) {
			// Spectrum REF = scan number = index + 1
			spectrumRefInteger = mzMLspectrum.getIndex() + 1 + offset;
			prideXmlSpectrum.setId(spectrumRefInteger);
		} else {
			spectrumRefInteger = newIndex + offset;
			prideXmlSpectrum.setId(spectrumRefInteger);
		}

		prideXmlSpectrum
				.setSpectrumDesc(getSpectrumDesc(mzMLSpectrumParamGroup, spectrumRefInteger));

		// Set intensities
		PeakListBinaryType peakListBinaryArray = factory.createPeakListBinaryType();
		Data arrayData = getDataArray(mzMLspectrum.getBinaryDataArrayList(), INTENSITY_ACC,
				mzMLspectrum.getDefaultArrayLength());
		peakListBinaryArray.setData(arrayData);
		prideXmlSpectrum.setIntenArrayBinary(peakListBinaryArray);

		// Set mz values
		peakListBinaryArray = factory.createPeakListBinaryType();
		arrayData = getDataArray(mzMLspectrum.getBinaryDataArrayList(), MZ_ACC,
				mzMLspectrum.getDefaultArrayLength());
		peakListBinaryArray.setData(arrayData);
		prideXmlSpectrum.setMzArrayBinary(peakListBinaryArray);

		return prideXmlSpectrum;

	}

	private SpectrumDescType getSpectrumDesc(ParamGroup mzMLSpectrumParamGroup,
			int spectrumRefInteger) {
		// spectrum desc
		SpectrumDescType prideXmlSpecDesc = factory.createSpectrumDescType();

		// Settings
		SpectrumSettingsType prideXmlSettings = factory.createSpectrumSettingsType();
		prideXmlSpecDesc.setSpectrumSettings(prideXmlSettings);

		// Instrument
		SpectrumInstrument xmlInstrument = getInstrument(mzMLSpectrumParamGroup);
		prideXmlSettings.setSpectrumInstrument(xmlInstrument);

		// PrecursorList
		final uk.ac.ebi.jmzml.model.mzml.PrecursorList precursorList = mzMLspectrum
				.getPrecursorList();

		if (precursorList != null) {
			PrecursorList prideXmlPrecursorList = factory.createSpectrumDescTypePrecursorList();
			for (Precursor mzMLPrecursor : precursorList.getPrecursor()) {
				uk.ac.ebi.jmzml.model.mzml.Spectrum precursorSpectrum = null;
				if (mzMLPrecursor.getSpectrumRef() != null)
					precursorSpectrum = getPrecursorSpectrum(mzMLPrecursor.getSpectrumRef());
				PrecursorType prideXmlPrecursor = new PrecursorAdapter(mzMLPrecursor,
						referenceableParamGroupList, factory, prideCvUtil, precursorSpectrum,
						offset).adapt();
				prideXmlPrecursorList.getPrecursor().add(prideXmlPrecursor);
			}
			prideXmlPrecursorList.setCount(precursorList.getPrecursor().size());
			prideXmlSpecDesc.setPrecursorList(prideXmlPrecursorList);
		}
		return prideXmlSpecDesc;
	}

	private uk.ac.ebi.jmzml.model.mzml.Spectrum getPrecursorSpectrum(String spectrumRef) {
		if (mzMLUnmarshaller != null) {
			uk.ac.ebi.jmzml.model.mzml.Spectrum spectrum;
			try {
				spectrum = mzMLUnmarshaller.getSpectrumById(spectrumRef);
				return spectrum;
			} catch (MzMLUnmarshallerException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	private Data getDataArray(BinaryDataArrayList binaryDataArrayList, Accession acc,
			Integer arrayLength) {
		Data arrayData = factory.createPeakListBinaryTypeData();
		if (binaryDataArrayList != null) {
			for (BinaryDataArray binaryDataArray : binaryDataArrayList.getBinaryDataArray()) {
				final CVParam cvTermDataType = MzMLControlVocabularyXmlFactory.getCvFromParamGroup(
						binaryDataArray, referenceableParamGroupList, acc);

				// if it is an intensity array
				byte[] bytes;
				if (cvTermDataType != null) {
					if (binaryDataArray.needsUncompressing() && arrayLength > 0) {
						bytes = BinaryUtils.decompress(binaryDataArray.getBinary());
					} else {
						bytes = binaryDataArray.getBinary();
					}
					arrayData.setEndian("little"); // mzML should be always in
													// little endian
					arrayData.setLength(arrayLength);

					final Precision mzMLprecision = binaryDataArray.getPrecision();
					String precision = "32";// by default?;
					Precision precisionObj = null;
					if (mzMLprecision.equals(Precision.FLOAT32BIT)) {
						precision = "32";
						precisionObj = Precision.FLOAT32BIT;
					} else if (mzMLprecision.equals(Precision.FLOAT64BIT)) {
						precision = "64";
						precisionObj = Precision.FLOAT64BIT;
					} else if (mzMLprecision.equals(Precision.INT32BIT)) {
						precision = "32";
						precisionObj = Precision.INT32BIT;
					} else if (mzMLprecision.equals(Precision.INT64BIT)) {
						precision = "32";
						precisionObj = Precision.INT64BIT;
					}
					// arrayData.setPrecision(precision);

					byte[] transformedBytes = BinaryUtils.transformBinaryArray(bytes, precisionObj,
							ByteOrder.LITTLE_ENDIAN);
					// After the transformation, the byte array is the result
					// from convert double numbers to bytes array
					// so the precission will be the number of bits that a
					// double uses, that is, 64
					precision = String.valueOf(Double.SIZE);
					arrayData.setPrecision(precision);
					arrayData.setValue(transformedBytes);

				}
			}
			return arrayData;
		}
		return null;

	}

	private SpectrumInstrument getInstrument(ParamGroup mzMLSpectrumParamGroup) {
		String msLevel = MzMLControlVocabularyXmlFactory.getValueFromParamGroupByAccession(
				mzMLSpectrumParamGroup, referenceableParamGroupList, MS_LEVEL_ACC);
		String mzRangeStart = MzMLControlVocabularyXmlFactory.getValueFromParamGroupByAccession(
				mzMLSpectrumParamGroup, referenceableParamGroupList, LOWEST_OBSERVED_MZ_ACC);
		String mzRangeStop = MzMLControlVocabularyXmlFactory.getValueFromParamGroupByAccession(
				mzMLSpectrumParamGroup, referenceableParamGroupList, HIGHEST_OBSERVED_MZ_ACC);

		SpectrumInstrument xmlInstrument = factory.createSpectrumSettingsTypeSpectrumInstrument();
		// xmlInstrument
		// mslevel
		if (msLevel != null) {
			try {
				xmlInstrument.setMsLevel(Integer.valueOf(msLevel));
			} catch (NumberFormatException ex) {
				// do nothing
			}
		}
		// mzRange start
		if (mzRangeStart != null) {
			try {
				xmlInstrument.setMzRangeStart(Float.valueOf(mzRangeStart));
			} catch (NumberFormatException ex) {
				// do nothing
			}
		}
		// mzRange stop
		if (mzRangeStop != null) {
			try {
				xmlInstrument.setMzRangeStop(Float.valueOf(mzRangeStop));
			} catch (NumberFormatException ex) {
				// do nothing
			}
		}
		return xmlInstrument;
	}

}
