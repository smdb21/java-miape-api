package org.proteored.miapeapi.xml.pride.ms;

import java.util.List;

import org.apache.log4j.Logger;
import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.cv.ms.AcquisitionParameters;
import org.proteored.miapeapi.interfaces.ms.Acquisition;
import org.proteored.miapeapi.xml.pride.autogenerated.CvParamType;
import org.proteored.miapeapi.xml.pride.autogenerated.DataProcessingType.Software;
import org.proteored.miapeapi.xml.pride.autogenerated.InstrumentDescriptionType.AnalyzerList;
import org.proteored.miapeapi.xml.pride.autogenerated.ParamType;
import org.proteored.miapeapi.xml.pride.autogenerated.UserParamType;
import org.proteored.miapeapi.xml.pride.util.PrideControlVocabularyXmlFactory;

public class AcquisitionImpl implements Acquisition {
	private final Integer identifier;
	private final Software software;
	private final AnalyzerList analyzers;
	private static Logger log = Logger.getLogger("log4j.logger.org.proteored");
	private final ControlVocabularyManager cvManager;

	public AcquisitionImpl(Software software, AnalyzerList analyzers, Integer identifier,
			ControlVocabularyManager cvManager) {
		this.software = software;
		this.identifier = identifier;
		this.analyzers = analyzers;
		this.cvManager = cvManager;
	}

	@Override
	public String getParameterFile() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getCatalogNumber() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getComments() {
		return software.getComments();
	}

	@Override
	public String getCustomizations() {
		// Search for CUSTOMIZATION CV: MS:1000032
		if (this.analyzers != null) {
			for (ParamType analyzer : this.analyzers.getAnalyzer()) {
				if (PrideControlVocabularyXmlFactory.getCvFromParamType(analyzer,
						AcquisitionParameters.CUSTOMIZATION_CV) != null)
					return PrideControlVocabularyXmlFactory.writeParam(analyzer);
			}
		}
		return null;
	}

	@Override
	public String getDescription() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getManufacturer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getModel() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getName() {

		return software.getName();
	}

	@Override
	public String getParameters() {
		log.info("Getting acquisition parameters");
		StringBuilder sb = new StringBuilder();
		if (this.analyzers != null) {
			for (ParamType analyzer : this.analyzers.getAnalyzer()) {
				log.info("analyzer has " + analyzer.getCvParamOrUserParam().size() + " params");
				for (Object cv : analyzer.getCvParamOrUserParam()) {
					if (cv instanceof CvParamType)
						log.info("cv name:" + ((CvParamType) cv).getName());
					else
						log.info("cv name:" + ((UserParamType) cv).getName());

				}
				final List<CvParamType> cvs = PrideControlVocabularyXmlFactory.getCvsFromParamType(
						analyzer, AcquisitionParameters.getInstance(cvManager));
				if (cvs != null) {
					for (CvParamType cvParamType : cvs) {
						log.info("Adding CVParam to acquisition parameters "
								+ PrideControlVocabularyXmlFactory.writeParam(cvParamType));
						if (!sb.toString().equals(""))
							sb.append(PrideControlVocabularyXmlFactory.TERM_SEPARATOR);
						sb.append(PrideControlVocabularyXmlFactory.writeParam(cvParamType));
					}
				}
			}
		}

		if (!sb.toString().equals(""))
			return sb.toString();
		return null;
	}

	@Override
	public String getURI() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getVersion() {
		return software.getVersion();
	}

	@Override
	public int getId() {
		if (identifier != null)
			return identifier;
		return -1;
	}

	@Override
	public String getTransitionListFile() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getTargetList() {
		// TODO Auto-generated method stub
		return null;
	}

}
