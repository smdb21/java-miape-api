package org.proteored.miapeapi.xml.pride.adapter;

import org.apache.log4j.Logger;
import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.interfaces.ms.MiapeMSDocument;
import org.proteored.miapeapi.interfaces.msi.MiapeMSIDocument;
import org.proteored.miapeapi.xml.pride.autogenerated.ExperimentCollection;
import org.proteored.miapeapi.xml.pride.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.pride.util.PrideControlVocabularyXmlFactory;

/**
 * Implementation of {@link ExperimentCollection} from a {@link MiapeMSDocument}
 * and a {@link MiapeMSIDocument} object.
 * 
 * @author Salvador
 * 
 */
public class ExperimentCollectionAdapter implements
		Adapter<ExperimentCollection> {

	private final MiapeMSDocument miapeMS;
	private final MiapeMSIDocument miapeMSI;
	private final ObjectFactory factory;

	private final ControlVocabularyManager cvManager;
	private static Logger log = Logger.getLogger("log4j.logger.org.proteored");

	private ExperimentCollection xmlPRIDE;
	private final boolean addPeakList;
	private final boolean gelBasedExperiment;

	public ExperimentCollectionAdapter(MiapeMSDocument miapeMS,
			MiapeMSIDocument miapeMSI,
			ControlVocabularyManager controlVocabularyUtil,
			boolean parseResultingDataPeakList) {
		this(miapeMS, miapeMSI, controlVocabularyUtil,
				parseResultingDataPeakList, false);
	}

	public ExperimentCollectionAdapter(MiapeMSDocument miapeMS,
			MiapeMSIDocument miapeMSI,
			ControlVocabularyManager controlVocabularyUtil,
			boolean parseResultingDataPeakList, boolean gelBasedExperiment) {
		this.miapeMS = miapeMS;
		this.miapeMSI = miapeMSI;
		this.factory = new ObjectFactory();
		this.cvManager = controlVocabularyUtil;
		this.addPeakList = parseResultingDataPeakList;
		this.gelBasedExperiment = gelBasedExperiment;
	}

	@Override
	public ExperimentCollection adapt() {
		xmlPRIDE = factory.createExperimentCollection();
		xmlPRIDE.setVersion(PrideControlVocabularyXmlFactory.PRIDE_VERSION);
		xmlPRIDE.getExperiment().add(
				new ExperimentAdapter(factory, cvManager, miapeMS, miapeMSI,
						addPeakList, gelBasedExperiment).adapt());

		return xmlPRIDE;
	}

	/*
	 * private void addSpectra(SpectrumList spectrumList) {
	 * log.info("Adding spectra"); if (miapeMS.getResultingDatas() != null) {
	 * for (ResultingData resultingData : miapeMS.getResultingDatas()) { if
	 * (resultingData.getSpectrumDescriptions() != null) { for
	 * (SpectrumDescription spectrum : resultingData.getSpectrumDescriptions())
	 * { Spectrum xmlSpectrum =
	 * factory.createExperimentTypeMzDataSpectrumListSpectrum();
	 * SpectrumDescType xmlSpecDesc = factory.createSpectrumDescType();
	 * SpectrumSettingsType xmlSettings = factory.createSpectrumSettingsType();
	 * SpectrumInstrument xmlInstrument =
	 * factory.createSpectrumSettingsTypeSpectrumInstrument();
	 * xmlInstrument.setMsLevel(Utils.getIntegerValue(spectrum.getMsLevel()));
	 * xmlSettings.setSpectrumInstrument(xmlInstrument);
	 * xmlSpecDesc.setSpectrumSettings(xmlSettings); PrecursorList
	 * xmlPrecursorList = factory.createSpectrumDescTypePrecursorList();
	 * xmlPrecursorList.setCount(1); PrecursorType xmlPrecursor =
	 * factory.createPrecursorType();
	 * xmlPrecursor.setIonSelection(factory.createParamType());
	 * prideCvUtil.addCvParamToParamType(xmlPrecursor.getIonSelection(),
	 * ChargeState.CHARGE_STATE.getCvId(),
	 * ChargeState.CHARGE_STATE.getDescription(), spectrum.getPrecursorCharge(),
	 * ChargeState.CHARGE_STATE.getCVRef()); prideCvUtil
	 * .addCvParamToParamType(xmlPrecursor.getIonSelection(),
	 * MOverZ.M_OVER_Z.getCvId(), MOverZ.M_OVER_Z.getDescription(),
	 * spectrum.getPrecursorMz(), MOverZ.M_OVER_Z.getCVRef());
	 * xmlPrecursorList.getPrecursor().add(xmlPrecursor);
	 * xmlSpecDesc.setPrecursorList(xmlPrecursorList);
	 * xmlSpectrum.setId(Utils.getIntegerValue(spectrum.getName()));
	 * xmlSpectrum.setSpectrumDesc(xmlSpecDesc);
	 * spectrumList.getSpectrum().add(xmlSpectrum); } } } } }
	 */

}
