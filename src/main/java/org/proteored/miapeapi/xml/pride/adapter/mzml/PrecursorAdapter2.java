package org.proteored.miapeapi.xml.pride.adapter.mzml;

import java.util.List;

import org.apache.log4j.Logger;
import org.proteored.miapeapi.cv.Accession;
import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.cv.ControlVocabularyTerm;
import org.proteored.miapeapi.cv.ms.ChargeState;
import org.proteored.miapeapi.cv.ms.MOverZ;
import org.proteored.miapeapi.interfaces.Adapter;
import org.proteored.miapeapi.xml.mzml.util.MzMLControlVocabularyXmlFactory;
import org.proteored.miapeapi.xml.pride.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.pride.autogenerated.ParamType;
import org.proteored.miapeapi.xml.pride.autogenerated.PrecursorType;
import org.proteored.miapeapi.xml.pride.util.PrideControlVocabularyXmlFactory;

import uk.ac.ebi.jmzml.model.mzml.CVParam;
import uk.ac.ebi.jmzml.model.mzml.ParamGroup;
import uk.ac.ebi.jmzml.model.mzml.ReferenceableParamGroupList;
import uk.ac.ebi.jmzml.model.mzml.SelectedIonList;
import uk.ac.ebi.jmzml.model.mzml.Spectrum;

public class PrecursorAdapter2 implements Adapter<PrecursorType> {
	private static Logger log = Logger.getLogger("log4j.logger.org.proteored");
	private static final Accession MS_LEVEL_ACC = new Accession("MS:1000511");
	private final uk.ac.ebi.jmzml.model.mzml.Precursor mzMLPrecursor;
	private final ObjectFactory factory;
	private final ControlVocabularyManager cvManager;
	private final ReferenceableParamGroupList referenceableParamGroupList;
	private final PrideControlVocabularyXmlFactory prideCvUtil;
	private final MzMLSpectrumIDManager mzMLSpectrumIDManager;
	private final Spectrum precursorSpectrum;
	private final int miapeMSid;

	public PrecursorAdapter2(
			uk.ac.ebi.jmzml.model.mzml.Precursor mzMLPrecursor,
			ReferenceableParamGroupList referenceableParamGroupList,
			ObjectFactory factory,
			PrideControlVocabularyXmlFactory prideCvUtil,
			Spectrum precursorSpectrum,
			MzMLSpectrumIDManager spectrumIDManager, int miapeMSid) {
		this.cvManager = prideCvUtil.getCvManager();
		this.prideCvUtil = prideCvUtil;
		this.factory = factory;
		this.mzMLPrecursor = mzMLPrecursor;
		this.referenceableParamGroupList = referenceableParamGroupList;
		this.mzMLSpectrumIDManager = spectrumIDManager;
		this.precursorSpectrum = precursorSpectrum;
		this.miapeMSid = miapeMSid;

	}

	@Override
	public PrecursorType adapt() {
		if (mzMLPrecursor != null) {
			PrecursorType prideXmlPrecursor = factory.createPrecursorType();
			final SelectedIonList selectedIonList = mzMLPrecursor
					.getSelectedIonList();
			if (selectedIonList != null) {
				final List<ParamGroup> selectedIon = selectedIonList
						.getSelectedIon();
				if (selectedIon != null) {
					// Cojo sólo el primer selected ion porque en pride solo hay
					// uno
					final ParamGroup selectedIonParamGroup = selectedIon.get(0);
					if (selectedIonParamGroup != null) {
						ParamType prideXmlIonSection = getSelectedIon(selectedIonParamGroup);
						prideXmlPrecursor.setIonSelection(prideXmlIonSection);
					}
				}
			}
			// activation
			final ParamGroup mzMLactivation = mzMLPrecursor.getActivation();
			if (mzMLactivation != null) {
				ParamType xmlActivation = prideCvUtil
						.getParamTypeFromMZMLParamGroup(mzMLactivation,
								referenceableParamGroupList);
				prideXmlPrecursor.setActivation(xmlActivation);
			}
			// mslevel
			try {
				if (precursorSpectrum != null) {

					final ParamGroup paramGroup = MzMLControlVocabularyXmlFactory
							.createParamGroup(precursorSpectrum.getCvParam(),
									null, precursorSpectrum
											.getReferenceableParamGroupRef());

					final CVParam cv = MzMLControlVocabularyXmlFactory
							.getCvFromParamGroup(paramGroup,
									referenceableParamGroupList, MS_LEVEL_ACC);
					if (cv != null)
						prideXmlPrecursor.setMsLevel(Integer.valueOf(cv
								.getValue()));
					else
						prideXmlPrecursor.setMsLevel(1); // by default
				}
			} catch (NumberFormatException ex) {
				prideXmlPrecursor.setMsLevel(1); // by default
			}

			if (precursorSpectrum != null) {
				final int spectrumIndex = this.mzMLSpectrumIDManager
						.getSpectrumIndex(this.miapeMSid
								+ precursorSpectrum.getId());
				if (spectrumIndex > -1) {
					prideXmlPrecursor.setSpectrumRef(spectrumIndex);
					return prideXmlPrecursor;
				}
			}
			prideXmlPrecursor.setSpectrumRef(0); // by default
			return prideXmlPrecursor;

		}
		return null;
	}

	private ParamType getSelectedIon(ParamGroup selectedIonParamGroup) {
		ParamType prideXmlIonSection = factory.createParamType();
		// charge state
		String chargeStateValue = MzMLControlVocabularyXmlFactory
				.getValueFromParamGroup(selectedIonParamGroup,
						referenceableParamGroupList,
						ChargeState.getInstance(cvManager));
		if (chargeStateValue == null) {
			log.debug("No charge state value for the spectrum. Assuming charge state=1");
			chargeStateValue = "1";
		}
		ControlVocabularyTerm chargeStateTerm = ChargeState.getInstance(
				cvManager).getChargeStateTerm();
		prideCvUtil.addCvParamToParamType(prideXmlIonSection,
				chargeStateTerm.getTermAccession(),
				chargeStateTerm.getPreferredName(), chargeStateValue,
				chargeStateTerm.getCVRef());

		// m/z
		String mzOverz = MzMLControlVocabularyXmlFactory
				.getValueFromParamGroup(selectedIonParamGroup,
						referenceableParamGroupList,
						MOverZ.getInstance(cvManager));
		if (mzOverz != null) {
			ControlVocabularyTerm mOverZTerm = MOverZ.getMOverZTerm(cvManager);
			prideCvUtil.addCvParamToParamType(prideXmlIonSection,
					mOverZTerm.getTermAccession(),
					mOverZTerm.getPreferredName(), mzOverz,
					mOverZTerm.getCVRef());

		}
		// Selected ion m/z
		ControlVocabularyTerm selectedMOverZTerm = MOverZ
				.getSelected_Ion_MOverZTerm(cvManager);
		if (mzOverz != null) {
			prideCvUtil.addCvParamToParamType(prideXmlIonSection,
					selectedMOverZTerm.getTermAccession(),
					selectedMOverZTerm.getPreferredName(),
					String.valueOf(mzOverz), selectedMOverZTerm.getCVRef());
			// this is necessary to search with the mzData
			prideCvUtil.addCvParamToParamType(prideXmlIonSection,
					selectedMOverZTerm.getTermAccession(), "MassToChargeRatio",
					String.valueOf(mzOverz), "MS");
		}

		if (prideXmlIonSection.getCvParamOrUserParam().isEmpty())
			return null;
		return prideXmlIonSection;
	}

}
