package org.proteored.miapeapi.xml.pride.util;

import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.cv.ms.ChargeState;
import org.proteored.miapeapi.cv.ms.MOverZ;
import org.proteored.miapeapi.cv.ms.ScanPolarity;
import org.proteored.miapeapi.xml.pride.autogenerated.CvParamType;
import org.proteored.miapeapi.xml.pride.autogenerated.PrecursorType;
import org.proteored.miapeapi.xml.pride.autogenerated.SpectrumDescType;

public class Precursor {
	private final PrecursorType precursor;
	private final SpectrumDescType spectrumDesc;
	private final ControlVocabularyManager cvManager;

	public Precursor(SpectrumDescType spectrumDesc, ControlVocabularyManager cvManager) {
		this.spectrumDesc = spectrumDesc;
		this.precursor = createPrecursor();
		this.cvManager = cvManager;
	}

	public String getCharge() {
		if (precursor != null && hasIonSelection()) {
			CvParamType cvParam = PrideControlVocabularyXmlFactory.getCvFromParamType(
					precursor.getIonSelection(), ChargeState.CHARGE_STATE_ACCESSION);
			if (cvParam != null)
				return cvParam.getValue();
		}
		return null;
	}

	public String getMzValue() {
		if (precursor != null && hasIonSelection()) {
			CvParamType cvParam = PrideControlVocabularyXmlFactory
					.getCvFromParamType(precursor.getIonSelection(), MOverZ
							.getMOverZTerm(cvManager).getTermAccession());
			if (cvParam != null)
				return cvParam.getValue();
		}
		return null;
	}

	public String getIonMode() {
		if (spectrumDesc != null && hasSpectrumInstrument()) {
			CvParamType cvParam = PrideControlVocabularyXmlFactory.getCvFromParamType(spectrumDesc
					.getSpectrumSettings().getSpectrumInstrument(), ScanPolarity.SCAN_POLARITY_ACC);
			if (cvParam != null)
				return cvParam.getValue();
		}
		return null;
	}

	private boolean hasSpectrumInstrument() {
		if (spectrumDesc.getSpectrumSettings() != null
				&& spectrumDesc.getSpectrumSettings().getSpectrumInstrument() != null)
			return true;
		return false;
	}

	private boolean hasIonSelection() {
		return precursor.getIonSelection() != null;
	}

	private PrecursorType createPrecursor() {
		if (spectrumDesc.getPrecursorList() != null
				&& spectrumDesc.getPrecursorList().getPrecursor().size() > 0) {
			return spectrumDesc.getPrecursorList().getPrecursor().get(0);
		}
		return null;
	}
}
