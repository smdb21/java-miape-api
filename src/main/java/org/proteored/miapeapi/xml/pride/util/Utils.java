package org.proteored.miapeapi.xml.pride.util;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.proteored.miapeapi.cv.Accession;
import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.cv.ControlVocabularyTerm;
import org.proteored.miapeapi.cv.ms.IonSourceName;
import org.proteored.miapeapi.xml.pride.autogenerated.CvParamType;
import org.proteored.miapeapi.xml.pride.autogenerated.ParamType;
import org.proteored.miapeapi.xml.pride.autogenerated.UserParamType;

public class Utils {

	public static void initParams(List<Object> list, Map<String, CvParamType> cvParams,
			List<UserParamType> userParams) {
		for (Object param : list) {
			if (param instanceof CvParamType) {
				CvParamType cvParam = (CvParamType) param;
				cvParams.put(cvParam.getAccession(), cvParam);
			} else if (param instanceof UserParamType) {
				UserParamType userParam = (UserParamType) param;
				userParams.add(userParam);
			}
		}
	}

	public static void initParams(List<Object> cvParamOrUserParam,
			Map<String, CvParamType> sourceCVParams) {
		List<UserParamType> tempUserParams = new ArrayList<UserParamType>();
		initParams(cvParamOrUserParam, sourceCVParams, tempUserParams);
		tempUserParams.clear();
	}

	/**
	 * Create a list of Parameters with pairs (name-value) from a List of
	 * CVParamTypes or UserParamTypes. If some CVParamType is included in the
	 * exclusion list, then it is discarted
	 * 
	 * @param listParam
	 * @param exclusionList
	 * @return the list of Parameters
	 */
	public static List<Parameter> createListParameter(List<Object> listParam,
			List<Accession> exclusionList) {
		List<Parameter> result = new ArrayList<Parameter>();
		for (Object param : listParam) {
			if (param instanceof CvParamType) {
				CvParamType cvParam = (CvParamType) param;
				boolean exclude = false;
				if (exclusionList != null) {
					for (Accession acc : exclusionList) {
						if (acc.equals(cvParam.getAccession()))
							exclude = true;
					}
				}
				if (cvParam.getName() != null && cvParam.getValue() != null && !exclude) {
					result.add(new Parameter(cvParam.getName(), cvParam.getValue()));

				}
			} else if (param instanceof UserParamType) {
				UserParamType userParam = (UserParamType) param;
				if (userParam.getName() != null && userParam.getValue() != null) {
					result.add(new Parameter(userParam.getName(), userParam.getValue()));
				}
			}
		}
		return result;
	}

	public static boolean isMaldi(List<Object> listParam, ControlVocabularyManager cvManager) {
		for (Object param : listParam) {
			if (param instanceof CvParamType) {
				CvParamType cvParam = (CvParamType) param;
				if (IonSourceName.IONIZATION_TYPE_ACC.equals(cvParam.getAccession())) {
					String value = cvParam.getValue();
					if (value != null && !"".equals(value)) {
						final ControlVocabularyTerm cvTerm = IonSourceName.getInstance(cvManager)
								.getCVTermByPreferredName(value);
						if (cvTerm != null)
							return IonSourceName.isMaldiFromAccession(cvTerm.getTermAccession());
					}
				} else {
					ControlVocabularyTerm cvTerm = IonSourceName.getInstance(cvManager)
							.getCVTermByAccession(new Accession(cvParam.getAccession()));
					if (cvTerm != null) {
						return IonSourceName.isMaldiFromAccession(cvTerm.getTermAccession());
					}
				}
			} else if (param instanceof UserParamType) {
				UserParamType userParam = (UserParamType) param;
				String value = userParam.getValue();
				if (value != null && !"".equals(value)) {
					final ControlVocabularyTerm cvTerm = IonSourceName.getInstance(cvManager)
							.getCVTermByPreferredName(value);
					if (cvTerm != null)
						return IonSourceName.isMaldiFromDescription(value, cvManager);
				}
			}
		}
		return false;
	}

	public static String getSourceName(ParamType source, List<Accession> exclusionList,
			ControlVocabularyManager cvManager) {
		// Tipical values in ESI
		// "MS:1000278", "surface enhanced laser desorption ionization"
		// "MS:1000406", "surface ionization"
		// "MS:1000075", "matrix-assisted laser desorption ionization"
		// "MS:1000405", "surface-assisted laser desorption ionization"
		// "MS:1000393", "laser desorption ionization"

		// tipical values in MALDI
		// "MS:1000073", "electrospray ionization"
		// "MS:1000398", "nanoelectrospray"
		// "MS:1000397", "microelectrospray"

		if (source != null) {
			if (source.getCvParamOrUserParam() != null) {
				for (Object object : source.getCvParamOrUserParam()) {
					ControlVocabularyTerm cvTerm = null;
					String description = null;
					if (object instanceof CvParamType) {
						CvParamType cvParam = (CvParamType) object;
						final ControlVocabularyTerm ionSourceCV = IonSourceName.getInstance(
								cvManager).getCVTermByAccession(
								new Accession(cvParam.getAccession()));
						if (ionSourceCV != null) {
							if (exclusionList != null)
								exclusionList.add(new Accession(cvParam.getAccession()));
							return PrideControlVocabularyXmlFactory.writeParam(cvParam);
						}
					} else if (object instanceof UserParamType) {
						UserParamType userParam = (UserParamType) object;
						String value = userParam.getValue();
						if (value != null && !"".equals(value)) {
							cvTerm = IonSourceName.getInstance(cvManager).getCVTermByPreferredName(
									value);
						}
						if (cvTerm != null)
							return PrideControlVocabularyXmlFactory.writeParam(userParam);

					}
				}
			}
		}
		return null;
	}

	public static int getIntegerValue(String msLevel) {
		try {
			return Integer.valueOf(msLevel);
		} catch (NumberFormatException e) {
			return 0;
		}
	}

}
